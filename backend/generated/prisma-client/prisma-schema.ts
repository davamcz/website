// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type Adress {
  id: ID!
  city: String
  street: String
  postalCode: String
}

type AdressConnection {
  pageInfo: PageInfo!
  edges: [AdressEdge]!
  aggregate: AggregateAdress!
}

input AdressCreateInput {
  id: ID
  city: String
  street: String
  postalCode: String
}

input AdressCreateOneInput {
  create: AdressCreateInput
  connect: AdressWhereUniqueInput
}

type AdressEdge {
  node: Adress!
  cursor: String!
}

enum AdressOrderByInput {
  id_ASC
  id_DESC
  city_ASC
  city_DESC
  street_ASC
  street_DESC
  postalCode_ASC
  postalCode_DESC
}

type AdressPreviousValues {
  id: ID!
  city: String
  street: String
  postalCode: String
}

type AdressSubscriptionPayload {
  mutation: MutationType!
  node: Adress
  updatedFields: [String!]
  previousValues: AdressPreviousValues
}

input AdressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdressWhereInput
  AND: [AdressSubscriptionWhereInput!]
  OR: [AdressSubscriptionWhereInput!]
  NOT: [AdressSubscriptionWhereInput!]
}

input AdressUpdateDataInput {
  city: String
  street: String
  postalCode: String
}

input AdressUpdateInput {
  city: String
  street: String
  postalCode: String
}

input AdressUpdateManyMutationInput {
  city: String
  street: String
  postalCode: String
}

input AdressUpdateOneInput {
  create: AdressCreateInput
  update: AdressUpdateDataInput
  upsert: AdressUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: AdressWhereUniqueInput
}

input AdressUpsertNestedInput {
  update: AdressUpdateDataInput!
  create: AdressCreateInput!
}

input AdressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  postalCode: String
  postalCode_not: String
  postalCode_in: [String!]
  postalCode_not_in: [String!]
  postalCode_lt: String
  postalCode_lte: String
  postalCode_gt: String
  postalCode_gte: String
  postalCode_contains: String
  postalCode_not_contains: String
  postalCode_starts_with: String
  postalCode_not_starts_with: String
  postalCode_ends_with: String
  postalCode_not_ends_with: String
  AND: [AdressWhereInput!]
  OR: [AdressWhereInput!]
  NOT: [AdressWhereInput!]
}

input AdressWhereUniqueInput {
  id: ID
}

type AggregateAdress {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateOffer {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type File {
  id: ID!
  key: String!
  fileName: String!
  mimeType: String!
  encoding: String!
  url: String!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  key: String!
  fileName: String!
  mimeType: String!
  encoding: String!
  url: String!
}

input FileCreateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  fileName_ASC
  fileName_DESC
  mimeType_ASC
  mimeType_DESC
  encoding_ASC
  encoding_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  key: String!
  fileName: String!
  mimeType: String!
  encoding: String!
  url: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateDataInput {
  key: String
  fileName: String
  mimeType: String
  encoding: String
  url: String
}

input FileUpdateInput {
  key: String
  fileName: String
  mimeType: String
  encoding: String
  url: String
}

input FileUpdateManyMutationInput {
  key: String
  fileName: String
  mimeType: String
  encoding: String
  url: String
}

input FileUpdateOneRequiredInput {
  create: FileCreateInput
  update: FileUpdateDataInput
  upsert: FileUpsertNestedInput
  connect: FileWhereUniqueInput
}

input FileUpsertNestedInput {
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  fileName: String
  fileName_not: String
  fileName_in: [String!]
  fileName_not_in: [String!]
  fileName_lt: String
  fileName_lte: String
  fileName_gt: String
  fileName_gte: String
  fileName_contains: String
  fileName_not_contains: String
  fileName_starts_with: String
  fileName_not_starts_with: String
  fileName_ends_with: String
  fileName_not_ends_with: String
  mimeType: String
  mimeType_not: String
  mimeType_in: [String!]
  mimeType_not_in: [String!]
  mimeType_lt: String
  mimeType_lte: String
  mimeType_gt: String
  mimeType_gte: String
  mimeType_contains: String
  mimeType_not_contains: String
  mimeType_starts_with: String
  mimeType_not_starts_with: String
  mimeType_ends_with: String
  mimeType_not_ends_with: String
  encoding: String
  encoding_not: String
  encoding_in: [String!]
  encoding_not_in: [String!]
  encoding_lt: String
  encoding_lte: String
  encoding_gt: String
  encoding_gte: String
  encoding_contains: String
  encoding_not_contains: String
  encoding_starts_with: String
  encoding_not_starts_with: String
  encoding_ends_with: String
  encoding_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAdress(data: AdressCreateInput!): Adress!
  updateAdress(data: AdressUpdateInput!, where: AdressWhereUniqueInput!): Adress
  updateManyAdresses(data: AdressUpdateManyMutationInput!, where: AdressWhereInput): BatchPayload!
  upsertAdress(where: AdressWhereUniqueInput!, create: AdressCreateInput!, update: AdressUpdateInput!): Adress!
  deleteAdress(where: AdressWhereUniqueInput!): Adress
  deleteManyAdresses(where: AdressWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createOffer(data: OfferCreateInput!): Offer!
  updateOffer(data: OfferUpdateInput!, where: OfferWhereUniqueInput!): Offer
  updateManyOffers(data: OfferUpdateManyMutationInput!, where: OfferWhereInput): BatchPayload!
  upsertOffer(where: OfferWhereUniqueInput!, create: OfferCreateInput!, update: OfferUpdateInput!): Offer!
  deleteOffer(where: OfferWhereUniqueInput!): Offer
  deleteManyOffers(where: OfferWhereInput): BatchPayload!
  createOrganization(data: OrganizationCreateInput!): Organization!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Offer {
  id: ID!
  active: Boolean
  public: Boolean
  amount: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
  beneficator: Organization!
  price: Int!
  name: String!
  user: User!
  description: String
  transport: String
}

type OfferConnection {
  pageInfo: PageInfo!
  edges: [OfferEdge]!
  aggregate: AggregateOffer!
}

input OfferCreateInput {
  id: ID
  active: Boolean
  public: Boolean
  amount: Int
  deletedAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  transactions: TransactionCreateManyWithoutOfferInput
  beneficator: OrganizationCreateOneWithoutOffersInput!
  price: Int!
  name: String!
  user: UserCreateOneWithoutOffersInput!
  description: String
  transport: String
}

input OfferCreateManyWithoutBeneficatorInput {
  create: [OfferCreateWithoutBeneficatorInput!]
  connect: [OfferWhereUniqueInput!]
}

input OfferCreateManyWithoutUserInput {
  create: [OfferCreateWithoutUserInput!]
  connect: [OfferWhereUniqueInput!]
}

input OfferCreateOneWithoutTransactionsInput {
  create: OfferCreateWithoutTransactionsInput
  connect: OfferWhereUniqueInput
}

input OfferCreateWithoutBeneficatorInput {
  id: ID
  active: Boolean
  public: Boolean
  amount: Int
  deletedAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  transactions: TransactionCreateManyWithoutOfferInput
  price: Int!
  name: String!
  user: UserCreateOneWithoutOffersInput!
  description: String
  transport: String
}

input OfferCreateWithoutTransactionsInput {
  id: ID
  active: Boolean
  public: Boolean
  amount: Int
  deletedAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  beneficator: OrganizationCreateOneWithoutOffersInput!
  price: Int!
  name: String!
  user: UserCreateOneWithoutOffersInput!
  description: String
  transport: String
}

input OfferCreateWithoutUserInput {
  id: ID
  active: Boolean
  public: Boolean
  amount: Int
  deletedAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  transactions: TransactionCreateManyWithoutOfferInput
  beneficator: OrganizationCreateOneWithoutOffersInput!
  price: Int!
  name: String!
  description: String
  transport: String
}

type OfferEdge {
  node: Offer!
  cursor: String!
}

enum OfferOrderByInput {
  id_ASC
  id_DESC
  active_ASC
  active_DESC
  public_ASC
  public_DESC
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  price_ASC
  price_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  transport_ASC
  transport_DESC
}

type OfferPreviousValues {
  id: ID!
  active: Boolean
  public: Boolean
  amount: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  price: Int!
  name: String!
  description: String
  transport: String
}

input OfferScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  active: Boolean
  active_not: Boolean
  public: Boolean
  public_not: Boolean
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  transport: String
  transport_not: String
  transport_in: [String!]
  transport_not_in: [String!]
  transport_lt: String
  transport_lte: String
  transport_gt: String
  transport_gte: String
  transport_contains: String
  transport_not_contains: String
  transport_starts_with: String
  transport_not_starts_with: String
  transport_ends_with: String
  transport_not_ends_with: String
  AND: [OfferScalarWhereInput!]
  OR: [OfferScalarWhereInput!]
  NOT: [OfferScalarWhereInput!]
}

type OfferSubscriptionPayload {
  mutation: MutationType!
  node: Offer
  updatedFields: [String!]
  previousValues: OfferPreviousValues
}

input OfferSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OfferWhereInput
  AND: [OfferSubscriptionWhereInput!]
  OR: [OfferSubscriptionWhereInput!]
  NOT: [OfferSubscriptionWhereInput!]
}

input OfferUpdateInput {
  active: Boolean
  public: Boolean
  amount: Int
  deletedAt: DateTime
  email: String
  firstName: String
  lastName: String
  transactions: TransactionUpdateManyWithoutOfferInput
  beneficator: OrganizationUpdateOneRequiredWithoutOffersInput
  price: Int
  name: String
  user: UserUpdateOneRequiredWithoutOffersInput
  description: String
  transport: String
}

input OfferUpdateManyDataInput {
  active: Boolean
  public: Boolean
  amount: Int
  deletedAt: DateTime
  email: String
  firstName: String
  lastName: String
  price: Int
  name: String
  description: String
  transport: String
}

input OfferUpdateManyMutationInput {
  active: Boolean
  public: Boolean
  amount: Int
  deletedAt: DateTime
  email: String
  firstName: String
  lastName: String
  price: Int
  name: String
  description: String
  transport: String
}

input OfferUpdateManyWithoutBeneficatorInput {
  create: [OfferCreateWithoutBeneficatorInput!]
  delete: [OfferWhereUniqueInput!]
  connect: [OfferWhereUniqueInput!]
  set: [OfferWhereUniqueInput!]
  disconnect: [OfferWhereUniqueInput!]
  update: [OfferUpdateWithWhereUniqueWithoutBeneficatorInput!]
  upsert: [OfferUpsertWithWhereUniqueWithoutBeneficatorInput!]
  deleteMany: [OfferScalarWhereInput!]
  updateMany: [OfferUpdateManyWithWhereNestedInput!]
}

input OfferUpdateManyWithoutUserInput {
  create: [OfferCreateWithoutUserInput!]
  delete: [OfferWhereUniqueInput!]
  connect: [OfferWhereUniqueInput!]
  set: [OfferWhereUniqueInput!]
  disconnect: [OfferWhereUniqueInput!]
  update: [OfferUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [OfferUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [OfferScalarWhereInput!]
  updateMany: [OfferUpdateManyWithWhereNestedInput!]
}

input OfferUpdateManyWithWhereNestedInput {
  where: OfferScalarWhereInput!
  data: OfferUpdateManyDataInput!
}

input OfferUpdateOneRequiredWithoutTransactionsInput {
  create: OfferCreateWithoutTransactionsInput
  update: OfferUpdateWithoutTransactionsDataInput
  upsert: OfferUpsertWithoutTransactionsInput
  connect: OfferWhereUniqueInput
}

input OfferUpdateWithoutBeneficatorDataInput {
  active: Boolean
  public: Boolean
  amount: Int
  deletedAt: DateTime
  email: String
  firstName: String
  lastName: String
  transactions: TransactionUpdateManyWithoutOfferInput
  price: Int
  name: String
  user: UserUpdateOneRequiredWithoutOffersInput
  description: String
  transport: String
}

input OfferUpdateWithoutTransactionsDataInput {
  active: Boolean
  public: Boolean
  amount: Int
  deletedAt: DateTime
  email: String
  firstName: String
  lastName: String
  beneficator: OrganizationUpdateOneRequiredWithoutOffersInput
  price: Int
  name: String
  user: UserUpdateOneRequiredWithoutOffersInput
  description: String
  transport: String
}

input OfferUpdateWithoutUserDataInput {
  active: Boolean
  public: Boolean
  amount: Int
  deletedAt: DateTime
  email: String
  firstName: String
  lastName: String
  transactions: TransactionUpdateManyWithoutOfferInput
  beneficator: OrganizationUpdateOneRequiredWithoutOffersInput
  price: Int
  name: String
  description: String
  transport: String
}

input OfferUpdateWithWhereUniqueWithoutBeneficatorInput {
  where: OfferWhereUniqueInput!
  data: OfferUpdateWithoutBeneficatorDataInput!
}

input OfferUpdateWithWhereUniqueWithoutUserInput {
  where: OfferWhereUniqueInput!
  data: OfferUpdateWithoutUserDataInput!
}

input OfferUpsertWithoutTransactionsInput {
  update: OfferUpdateWithoutTransactionsDataInput!
  create: OfferCreateWithoutTransactionsInput!
}

input OfferUpsertWithWhereUniqueWithoutBeneficatorInput {
  where: OfferWhereUniqueInput!
  update: OfferUpdateWithoutBeneficatorDataInput!
  create: OfferCreateWithoutBeneficatorInput!
}

input OfferUpsertWithWhereUniqueWithoutUserInput {
  where: OfferWhereUniqueInput!
  update: OfferUpdateWithoutUserDataInput!
  create: OfferCreateWithoutUserInput!
}

input OfferWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  active: Boolean
  active_not: Boolean
  public: Boolean
  public_not: Boolean
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  beneficator: OrganizationWhereInput
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  user: UserWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  transport: String
  transport_not: String
  transport_in: [String!]
  transport_not_in: [String!]
  transport_lt: String
  transport_lte: String
  transport_gt: String
  transport_gte: String
  transport_contains: String
  transport_not_contains: String
  transport_starts_with: String
  transport_not_starts_with: String
  transport_ends_with: String
  transport_not_ends_with: String
  AND: [OfferWhereInput!]
  OR: [OfferWhereInput!]
  NOT: [OfferWhereInput!]
}

input OfferWhereUniqueInput {
  id: ID
}

type Organization {
  id: ID!
  apiId: Int
  apiSecret: String
  organizationId: Int
  active: Boolean!
  logo: File!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  offers(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer!]
  projectId: Int
  description: String!
  url: String!
}

type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  id: ID
  apiId: Int
  apiSecret: String
  organizationId: Int
  active: Boolean!
  logo: FileCreateOneInput!
  deletedAt: DateTime
  name: String!
  offers: OfferCreateManyWithoutBeneficatorInput
  projectId: Int
  description: String!
  url: String!
}

input OrganizationCreateOneWithoutOffersInput {
  create: OrganizationCreateWithoutOffersInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutOffersInput {
  id: ID
  apiId: Int
  apiSecret: String
  organizationId: Int
  active: Boolean!
  logo: FileCreateOneInput!
  deletedAt: DateTime
  name: String!
  projectId: Int
  description: String!
  url: String!
}

type OrganizationEdge {
  node: Organization!
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  apiId_ASC
  apiId_DESC
  apiSecret_ASC
  apiSecret_DESC
  organizationId_ASC
  organizationId_DESC
  active_ASC
  active_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  name_ASC
  name_DESC
  projectId_ASC
  projectId_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
}

type OrganizationPreviousValues {
  id: ID!
  apiId: Int
  apiSecret: String
  organizationId: Int
  active: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  projectId: Int
  description: String!
  url: String!
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
  AND: [OrganizationSubscriptionWhereInput!]
  OR: [OrganizationSubscriptionWhereInput!]
  NOT: [OrganizationSubscriptionWhereInput!]
}

input OrganizationUpdateInput {
  apiId: Int
  apiSecret: String
  organizationId: Int
  active: Boolean
  logo: FileUpdateOneRequiredInput
  deletedAt: DateTime
  name: String
  offers: OfferUpdateManyWithoutBeneficatorInput
  projectId: Int
  description: String
  url: String
}

input OrganizationUpdateManyMutationInput {
  apiId: Int
  apiSecret: String
  organizationId: Int
  active: Boolean
  deletedAt: DateTime
  name: String
  projectId: Int
  description: String
  url: String
}

input OrganizationUpdateOneRequiredWithoutOffersInput {
  create: OrganizationCreateWithoutOffersInput
  update: OrganizationUpdateWithoutOffersDataInput
  upsert: OrganizationUpsertWithoutOffersInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpdateWithoutOffersDataInput {
  apiId: Int
  apiSecret: String
  organizationId: Int
  active: Boolean
  logo: FileUpdateOneRequiredInput
  deletedAt: DateTime
  name: String
  projectId: Int
  description: String
  url: String
}

input OrganizationUpsertWithoutOffersInput {
  update: OrganizationUpdateWithoutOffersDataInput!
  create: OrganizationCreateWithoutOffersInput!
}

input OrganizationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  apiId: Int
  apiId_not: Int
  apiId_in: [Int!]
  apiId_not_in: [Int!]
  apiId_lt: Int
  apiId_lte: Int
  apiId_gt: Int
  apiId_gte: Int
  apiSecret: String
  apiSecret_not: String
  apiSecret_in: [String!]
  apiSecret_not_in: [String!]
  apiSecret_lt: String
  apiSecret_lte: String
  apiSecret_gt: String
  apiSecret_gte: String
  apiSecret_contains: String
  apiSecret_not_contains: String
  apiSecret_starts_with: String
  apiSecret_not_starts_with: String
  apiSecret_ends_with: String
  apiSecret_not_ends_with: String
  organizationId: Int
  organizationId_not: Int
  organizationId_in: [Int!]
  organizationId_not_in: [Int!]
  organizationId_lt: Int
  organizationId_lte: Int
  organizationId_gt: Int
  organizationId_gte: Int
  active: Boolean
  active_not: Boolean
  logo: FileWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  offers_every: OfferWhereInput
  offers_some: OfferWhereInput
  offers_none: OfferWhereInput
  projectId: Int
  projectId_not: Int
  projectId_in: [Int!]
  projectId_not_in: [Int!]
  projectId_lt: Int
  projectId_lte: Int
  projectId_gt: Int
  projectId_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
}

input OrganizationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  adress(where: AdressWhereUniqueInput!): Adress
  adresses(where: AdressWhereInput, orderBy: AdressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Adress]!
  adressesConnection(where: AdressWhereInput, orderBy: AdressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdressConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  offer(where: OfferWhereUniqueInput!): Offer
  offers(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer]!
  offersConnection(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OfferConnection!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  adress(where: AdressSubscriptionWhereInput): AdressSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  offer(where: OfferSubscriptionWhereInput): OfferSubscriptionPayload
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Transaction {
  id: ID!
  amount: Int!
  email: String!
  firstName: String!
  lastName: String!
  comment: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  donatedAmount: Int
  status: TransactionStatus!
  offer: Offer!
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  id: ID
  amount: Int!
  email: String!
  firstName: String!
  lastName: String!
  comment: String
  deletedAt: DateTime
  donatedAmount: Int
  status: TransactionStatus
  offer: OfferCreateOneWithoutTransactionsInput!
}

input TransactionCreateManyWithoutOfferInput {
  create: [TransactionCreateWithoutOfferInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutOfferInput {
  id: ID
  amount: Int!
  email: String!
  firstName: String!
  lastName: String!
  comment: String
  deletedAt: DateTime
  donatedAmount: Int
  status: TransactionStatus
}

type TransactionEdge {
  node: Transaction!
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  donatedAmount_ASC
  donatedAmount_DESC
  status_ASC
  status_DESC
}

type TransactionPreviousValues {
  id: ID!
  amount: Int!
  email: String!
  firstName: String!
  lastName: String!
  comment: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  donatedAmount: Int
  status: TransactionStatus!
}

input TransactionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  donatedAmount: Int
  donatedAmount_not: Int
  donatedAmount_in: [Int!]
  donatedAmount_not_in: [Int!]
  donatedAmount_lt: Int
  donatedAmount_lte: Int
  donatedAmount_gt: Int
  donatedAmount_gte: Int
  status: TransactionStatus
  status_not: TransactionStatus
  status_in: [TransactionStatus!]
  status_not_in: [TransactionStatus!]
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
}

enum TransactionStatus {
  PENDING
  PAID
  FAILED
  INSUFFICIENT
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
  AND: [TransactionSubscriptionWhereInput!]
  OR: [TransactionSubscriptionWhereInput!]
  NOT: [TransactionSubscriptionWhereInput!]
}

input TransactionUpdateInput {
  amount: Int
  email: String
  firstName: String
  lastName: String
  comment: String
  deletedAt: DateTime
  donatedAmount: Int
  status: TransactionStatus
  offer: OfferUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateManyDataInput {
  amount: Int
  email: String
  firstName: String
  lastName: String
  comment: String
  deletedAt: DateTime
  donatedAmount: Int
  status: TransactionStatus
}

input TransactionUpdateManyMutationInput {
  amount: Int
  email: String
  firstName: String
  lastName: String
  comment: String
  deletedAt: DateTime
  donatedAmount: Int
  status: TransactionStatus
}

input TransactionUpdateManyWithoutOfferInput {
  create: [TransactionCreateWithoutOfferInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutOfferInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutOfferInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdateWithoutOfferDataInput {
  amount: Int
  email: String
  firstName: String
  lastName: String
  comment: String
  deletedAt: DateTime
  donatedAmount: Int
  status: TransactionStatus
}

input TransactionUpdateWithWhereUniqueWithoutOfferInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutOfferDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutOfferInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutOfferDataInput!
  create: TransactionCreateWithoutOfferInput!
}

input TransactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  donatedAmount: Int
  donatedAmount_not: Int
  donatedAmount_in: [Int!]
  donatedAmount_not_in: [Int!]
  donatedAmount_lt: Int
  donatedAmount_lte: Int
  donatedAmount_gt: Int
  donatedAmount_gte: Int
  status: TransactionStatus
  status_not: TransactionStatus
  status_in: [TransactionStatus!]
  status_not_in: [TransactionStatus!]
  offer: OfferWhereInput
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
}

input TransactionWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  password: String
  role: UserRole!
  offers(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer!]
  adress: Adress
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  firstName: String
  lastName: String
  password: String
  role: UserRole
  offers: OfferCreateManyWithoutUserInput
  adress: AdressCreateOneInput
}

input UserCreateOneWithoutOffersInput {
  create: UserCreateWithoutOffersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutOffersInput {
  id: ID
  email: String!
  firstName: String
  lastName: String
  password: String
  role: UserRole
  adress: AdressCreateOneInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  password: String
  role: UserRole!
}

enum UserRole {
  USER
  ADMIN
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  password: String
  role: UserRole
  offers: OfferUpdateManyWithoutUserInput
  adress: AdressUpdateOneInput
}

input UserUpdateManyMutationInput {
  email: String
  firstName: String
  lastName: String
  password: String
  role: UserRole
}

input UserUpdateOneRequiredWithoutOffersInput {
  create: UserCreateWithoutOffersInput
  update: UserUpdateWithoutOffersDataInput
  upsert: UserUpsertWithoutOffersInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutOffersDataInput {
  email: String
  firstName: String
  lastName: String
  password: String
  role: UserRole
  adress: AdressUpdateOneInput
}

input UserUpsertWithoutOffersInput {
  update: UserUpdateWithoutOffersDataInput!
  create: UserCreateWithoutOffersInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  offers_every: OfferWhereInput
  offers_some: OfferWhereInput
  offers_none: OfferWhereInput
  adress: AdressWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`