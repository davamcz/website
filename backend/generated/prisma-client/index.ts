// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql'
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model,
} from 'prisma-client-lib'
import { typeDefs } from './prisma-schema'

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U]

export type Maybe<T> = T | undefined | null

export interface Exists {
  adress: (where?: AdressWhereInput) => Promise<boolean>
  file: (where?: FileWhereInput) => Promise<boolean>
  gallery: (where?: GalleryWhereInput) => Promise<boolean>
  offer: (where?: OfferWhereInput) => Promise<boolean>
  organization: (where?: OrganizationWhereInput) => Promise<boolean>
  transaction: (where?: TransactionWhereInput) => Promise<boolean>
  user: (where?: UserWhereInput) => Promise<boolean>
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>
}

export interface Prisma {
  $exists: Exists
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>

  /**
   * Queries
   */

  adress: (where: AdressWhereUniqueInput) => AdressNullablePromise
  adresses: (args?: {
    where?: AdressWhereInput
    orderBy?: AdressOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<Adress>
  adressesConnection: (args?: {
    where?: AdressWhereInput
    orderBy?: AdressOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => AdressConnectionPromise
  file: (where: FileWhereUniqueInput) => FileNullablePromise
  files: (args?: {
    where?: FileWhereInput
    orderBy?: FileOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<File>
  filesConnection: (args?: {
    where?: FileWhereInput
    orderBy?: FileOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FileConnectionPromise
  gallery: (where: GalleryWhereUniqueInput) => GalleryNullablePromise
  galleries: (args?: {
    where?: GalleryWhereInput
    orderBy?: GalleryOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<Gallery>
  galleriesConnection: (args?: {
    where?: GalleryWhereInput
    orderBy?: GalleryOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => GalleryConnectionPromise
  offer: (where: OfferWhereUniqueInput) => OfferNullablePromise
  offers: (args?: {
    where?: OfferWhereInput
    orderBy?: OfferOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<Offer>
  offersConnection: (args?: {
    where?: OfferWhereInput
    orderBy?: OfferOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => OfferConnectionPromise
  organization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationNullablePromise
  organizations: (args?: {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<Organization>
  organizationsConnection: (args?: {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => OrganizationConnectionPromise
  transaction: (
    where: TransactionWhereUniqueInput
  ) => TransactionNullablePromise
  transactions: (args?: {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<Transaction>
  transactionsConnection: (args?: {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => TransactionConnectionPromise
  user: (where: UserWhereUniqueInput) => UserNullablePromise
  users: (args?: {
    where?: UserWhereInput
    orderBy?: UserOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<User>
  usersConnection: (args?: {
    where?: UserWhereInput
    orderBy?: UserOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => UserConnectionPromise
  node: (args: { id: ID_Output }) => Node

  /**
   * Mutations
   */

  createAdress: (data: AdressCreateInput) => AdressPromise
  updateAdress: (args: {
    data: AdressUpdateInput
    where: AdressWhereUniqueInput
  }) => AdressPromise
  updateManyAdresses: (args: {
    data: AdressUpdateManyMutationInput
    where?: AdressWhereInput
  }) => BatchPayloadPromise
  upsertAdress: (args: {
    where: AdressWhereUniqueInput
    create: AdressCreateInput
    update: AdressUpdateInput
  }) => AdressPromise
  deleteAdress: (where: AdressWhereUniqueInput) => AdressPromise
  deleteManyAdresses: (where?: AdressWhereInput) => BatchPayloadPromise
  createFile: (data: FileCreateInput) => FilePromise
  updateFile: (args: {
    data: FileUpdateInput
    where: FileWhereUniqueInput
  }) => FilePromise
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput
    where?: FileWhereInput
  }) => BatchPayloadPromise
  upsertFile: (args: {
    where: FileWhereUniqueInput
    create: FileCreateInput
    update: FileUpdateInput
  }) => FilePromise
  deleteFile: (where: FileWhereUniqueInput) => FilePromise
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise
  createGallery: (data: GalleryCreateInput) => GalleryPromise
  updateGallery: (args: {
    data: GalleryUpdateInput
    where: GalleryWhereUniqueInput
  }) => GalleryPromise
  upsertGallery: (args: {
    where: GalleryWhereUniqueInput
    create: GalleryCreateInput
    update: GalleryUpdateInput
  }) => GalleryPromise
  deleteGallery: (where: GalleryWhereUniqueInput) => GalleryPromise
  deleteManyGalleries: (where?: GalleryWhereInput) => BatchPayloadPromise
  createOffer: (data: OfferCreateInput) => OfferPromise
  updateOffer: (args: {
    data: OfferUpdateInput
    where: OfferWhereUniqueInput
  }) => OfferPromise
  updateManyOffers: (args: {
    data: OfferUpdateManyMutationInput
    where?: OfferWhereInput
  }) => BatchPayloadPromise
  upsertOffer: (args: {
    where: OfferWhereUniqueInput
    create: OfferCreateInput
    update: OfferUpdateInput
  }) => OfferPromise
  deleteOffer: (where: OfferWhereUniqueInput) => OfferPromise
  deleteManyOffers: (where?: OfferWhereInput) => BatchPayloadPromise
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise
  updateOrganization: (args: {
    data: OrganizationUpdateInput
    where: OrganizationWhereUniqueInput
  }) => OrganizationPromise
  updateManyOrganizations: (args: {
    data: OrganizationUpdateManyMutationInput
    where?: OrganizationWhereInput
  }) => BatchPayloadPromise
  upsertOrganization: (args: {
    where: OrganizationWhereUniqueInput
    create: OrganizationCreateInput
    update: OrganizationUpdateInput
  }) => OrganizationPromise
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise
  createTransaction: (data: TransactionCreateInput) => TransactionPromise
  updateTransaction: (args: {
    data: TransactionUpdateInput
    where: TransactionWhereUniqueInput
  }) => TransactionPromise
  updateManyTransactions: (args: {
    data: TransactionUpdateManyMutationInput
    where?: TransactionWhereInput
  }) => BatchPayloadPromise
  upsertTransaction: (args: {
    where: TransactionWhereUniqueInput
    create: TransactionCreateInput
    update: TransactionUpdateInput
  }) => TransactionPromise
  deleteTransaction: (where: TransactionWhereUniqueInput) => TransactionPromise
  deleteManyTransactions: (where?: TransactionWhereInput) => BatchPayloadPromise
  createUser: (data: UserCreateInput) => UserPromise
  updateUser: (args: {
    data: UserUpdateInput
    where: UserWhereUniqueInput
  }) => UserPromise
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput
  }) => BatchPayloadPromise
  upsertUser: (args: {
    where: UserWhereUniqueInput
    create: UserCreateInput
    update: UserUpdateInput
  }) => UserPromise
  deleteUser: (where: UserWhereUniqueInput) => UserPromise
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise

  /**
   * Subscriptions
   */

  $subscribe: Subscription
}

export interface Subscription {
  adress: (
    where?: AdressSubscriptionWhereInput
  ) => AdressSubscriptionPayloadSubscription
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription
  gallery: (
    where?: GallerySubscriptionWhereInput
  ) => GallerySubscriptionPayloadSubscription
  offer: (
    where?: OfferSubscriptionWhereInput
  ) => OfferSubscriptionPayloadSubscription
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription
  transaction: (
    where?: TransactionSubscriptionWhereInput
  ) => TransactionSubscriptionPayloadSubscription
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T
}

/**
 * Types
 */

export type OfferOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'active_ASC'
  | 'active_DESC'
  | 'publicOffer_ASC'
  | 'publicOffer_DESC'
  | 'amount_ASC'
  | 'amount_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'deletedAt_ASC'
  | 'deletedAt_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'transport_ASC'
  | 'transport_DESC'

export type FileOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'key_ASC'
  | 'key_DESC'
  | 'fileName_ASC'
  | 'fileName_DESC'
  | 'mimeType_ASC'
  | 'mimeType_DESC'
  | 'encoding_ASC'
  | 'encoding_DESC'
  | 'url_ASC'
  | 'url_DESC'

export type GalleryOrderByInput = 'id_ASC' | 'id_DESC'

export type TransactionStatus = 'PENDING' | 'PAID' | 'FAILED' | 'INSUFFICIENT'

export type UserRole = 'USER' | 'ADMIN'

export type TransactionOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'amount_ASC'
  | 'amount_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'comment_ASC'
  | 'comment_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'deletedAt_ASC'
  | 'deletedAt_DESC'
  | 'donatedAmount_ASC'
  | 'donatedAmount_DESC'
  | 'status_ASC'
  | 'status_DESC'

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED'

export type AdressOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'city_ASC'
  | 'city_DESC'
  | 'street_ASC'
  | 'street_DESC'
  | 'postalCode_ASC'
  | 'postalCode_DESC'

export type OrganizationOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'apiId_ASC'
  | 'apiId_DESC'
  | 'apiSecret_ASC'
  | 'apiSecret_DESC'
  | 'organizationId_ASC'
  | 'organizationId_DESC'
  | 'active_ASC'
  | 'active_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'deletedAt_ASC'
  | 'deletedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'projectId_ASC'
  | 'projectId_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'url_ASC'
  | 'url_DESC'

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'role_ASC'
  | 'role_DESC'

export interface OrganizationCreateWithoutOffersInput {
  id?: Maybe<ID_Input>
  apiId?: Maybe<Int>
  apiSecret?: Maybe<String>
  organizationId?: Maybe<Int>
  active: Boolean
  logo: FileCreateOneInput
  deletedAt?: Maybe<DateTimeInput>
  name: String
  projectId?: Maybe<Int>
  description: String
  url: String
}

export type AdressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>
}>

export interface OfferUpdateInput {
  active?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  amount?: Maybe<Int>
  deletedAt?: Maybe<DateTimeInput>
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  transactions?: Maybe<TransactionUpdateManyWithoutOfferInput>
  beneficator?: Maybe<OrganizationUpdateOneRequiredWithoutOffersInput>
  price?: Maybe<Int>
  name?: Maybe<String>
  user?: Maybe<UserUpdateOneRequiredWithoutOffersInput>
  description?: Maybe<String>
  transport?: Maybe<String>
  gallery?: Maybe<GalleryUpdateOneRequiredInput>
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>
}>

export interface TransactionUpdateManyWithoutOfferInput {
  create?: Maybe<
    TransactionCreateWithoutOfferInput[] | TransactionCreateWithoutOfferInput
  >
  delete?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>
  connect?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>
  set?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>
  disconnect?: Maybe<
    TransactionWhereUniqueInput[] | TransactionWhereUniqueInput
  >
  update?: Maybe<
    | TransactionUpdateWithWhereUniqueWithoutOfferInput[]
    | TransactionUpdateWithWhereUniqueWithoutOfferInput
  >
  upsert?: Maybe<
    | TransactionUpsertWithWhereUniqueWithoutOfferInput[]
    | TransactionUpsertWithWhereUniqueWithoutOfferInput
  >
  deleteMany?: Maybe<
    TransactionScalarWhereInput[] | TransactionScalarWhereInput
  >
  updateMany?: Maybe<
    | TransactionUpdateManyWithWhereNestedInput[]
    | TransactionUpdateManyWithWhereNestedInput
  >
}

export interface FileWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  key?: Maybe<String>
  key_not?: Maybe<String>
  key_in?: Maybe<String[] | String>
  key_not_in?: Maybe<String[] | String>
  key_lt?: Maybe<String>
  key_lte?: Maybe<String>
  key_gt?: Maybe<String>
  key_gte?: Maybe<String>
  key_contains?: Maybe<String>
  key_not_contains?: Maybe<String>
  key_starts_with?: Maybe<String>
  key_not_starts_with?: Maybe<String>
  key_ends_with?: Maybe<String>
  key_not_ends_with?: Maybe<String>
  fileName?: Maybe<String>
  fileName_not?: Maybe<String>
  fileName_in?: Maybe<String[] | String>
  fileName_not_in?: Maybe<String[] | String>
  fileName_lt?: Maybe<String>
  fileName_lte?: Maybe<String>
  fileName_gt?: Maybe<String>
  fileName_gte?: Maybe<String>
  fileName_contains?: Maybe<String>
  fileName_not_contains?: Maybe<String>
  fileName_starts_with?: Maybe<String>
  fileName_not_starts_with?: Maybe<String>
  fileName_ends_with?: Maybe<String>
  fileName_not_ends_with?: Maybe<String>
  mimeType?: Maybe<String>
  mimeType_not?: Maybe<String>
  mimeType_in?: Maybe<String[] | String>
  mimeType_not_in?: Maybe<String[] | String>
  mimeType_lt?: Maybe<String>
  mimeType_lte?: Maybe<String>
  mimeType_gt?: Maybe<String>
  mimeType_gte?: Maybe<String>
  mimeType_contains?: Maybe<String>
  mimeType_not_contains?: Maybe<String>
  mimeType_starts_with?: Maybe<String>
  mimeType_not_starts_with?: Maybe<String>
  mimeType_ends_with?: Maybe<String>
  mimeType_not_ends_with?: Maybe<String>
  encoding?: Maybe<String>
  encoding_not?: Maybe<String>
  encoding_in?: Maybe<String[] | String>
  encoding_not_in?: Maybe<String[] | String>
  encoding_lt?: Maybe<String>
  encoding_lte?: Maybe<String>
  encoding_gt?: Maybe<String>
  encoding_gte?: Maybe<String>
  encoding_contains?: Maybe<String>
  encoding_not_contains?: Maybe<String>
  encoding_starts_with?: Maybe<String>
  encoding_not_starts_with?: Maybe<String>
  encoding_ends_with?: Maybe<String>
  encoding_not_ends_with?: Maybe<String>
  url?: Maybe<String>
  url_not?: Maybe<String>
  url_in?: Maybe<String[] | String>
  url_not_in?: Maybe<String[] | String>
  url_lt?: Maybe<String>
  url_lte?: Maybe<String>
  url_gt?: Maybe<String>
  url_gte?: Maybe<String>
  url_contains?: Maybe<String>
  url_not_contains?: Maybe<String>
  url_starts_with?: Maybe<String>
  url_not_starts_with?: Maybe<String>
  url_ends_with?: Maybe<String>
  url_not_ends_with?: Maybe<String>
  AND?: Maybe<FileWhereInput[] | FileWhereInput>
  OR?: Maybe<FileWhereInput[] | FileWhereInput>
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>
}

export interface FileUpdateInput {
  key?: Maybe<String>
  fileName?: Maybe<String>
  mimeType?: Maybe<String>
  encoding?: Maybe<String>
  url?: Maybe<String>
}

export interface OfferCreateManyWithoutBeneficatorInput {
  create?: Maybe<
    OfferCreateWithoutBeneficatorInput[] | OfferCreateWithoutBeneficatorInput
  >
  connect?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>
}

export interface FileUpdateManyMutationInput {
  key?: Maybe<String>
  fileName?: Maybe<String>
  mimeType?: Maybe<String>
  encoding?: Maybe<String>
  url?: Maybe<String>
}

export interface TransactionUpdateWithWhereUniqueWithoutOfferInput {
  where: TransactionWhereUniqueInput
  data: TransactionUpdateWithoutOfferDataInput
}

export interface GalleryCreateInput {
  id?: Maybe<ID_Input>
  images?: Maybe<FileCreateManyInput>
}

export type GalleryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>
}>

export interface FileCreateManyInput {
  create?: Maybe<FileCreateInput[] | FileCreateInput>
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>
}

export interface GalleryWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  images_every?: Maybe<FileWhereInput>
  images_some?: Maybe<FileWhereInput>
  images_none?: Maybe<FileWhereInput>
  AND?: Maybe<GalleryWhereInput[] | GalleryWhereInput>
  OR?: Maybe<GalleryWhereInput[] | GalleryWhereInput>
  NOT?: Maybe<GalleryWhereInput[] | GalleryWhereInput>
}

export interface GalleryUpdateInput {
  images?: Maybe<FileUpdateManyInput>
}

export interface OfferSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>
  updatedFields_contains?: Maybe<String>
  updatedFields_contains_every?: Maybe<String[] | String>
  updatedFields_contains_some?: Maybe<String[] | String>
  node?: Maybe<OfferWhereInput>
  AND?: Maybe<OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput>
  OR?: Maybe<OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput>
  NOT?: Maybe<OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput>
}

export interface FileUpdateManyInput {
  create?: Maybe<FileCreateInput[] | FileCreateInput>
  update?: Maybe<
    | FileUpdateWithWhereUniqueNestedInput[]
    | FileUpdateWithWhereUniqueNestedInput
  >
  upsert?: Maybe<
    | FileUpsertWithWhereUniqueNestedInput[]
    | FileUpsertWithWhereUniqueNestedInput
  >
  delete?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>
  set?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>
  disconnect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>
  deleteMany?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>
  updateMany?: Maybe<
    FileUpdateManyWithWhereNestedInput[] | FileUpdateManyWithWhereNestedInput
  >
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>
  updatedFields_contains?: Maybe<String>
  updatedFields_contains_every?: Maybe<String[] | String>
  updatedFields_contains_some?: Maybe<String[] | String>
  node?: Maybe<FileWhereInput>
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>
}

export interface FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput
  data: FileUpdateDataInput
}

export interface AdressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>
  updatedFields_contains?: Maybe<String>
  updatedFields_contains_every?: Maybe<String[] | String>
  updatedFields_contains_some?: Maybe<String[] | String>
  node?: Maybe<AdressWhereInput>
  AND?: Maybe<AdressSubscriptionWhereInput[] | AdressSubscriptionWhereInput>
  OR?: Maybe<AdressSubscriptionWhereInput[] | AdressSubscriptionWhereInput>
  NOT?: Maybe<AdressSubscriptionWhereInput[] | AdressSubscriptionWhereInput>
}

export interface FileUpdateDataInput {
  key?: Maybe<String>
  fileName?: Maybe<String>
  mimeType?: Maybe<String>
  encoding?: Maybe<String>
  url?: Maybe<String>
}

export interface TransactionWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  amount?: Maybe<Int>
  amount_not?: Maybe<Int>
  amount_in?: Maybe<Int[] | Int>
  amount_not_in?: Maybe<Int[] | Int>
  amount_lt?: Maybe<Int>
  amount_lte?: Maybe<Int>
  amount_gt?: Maybe<Int>
  amount_gte?: Maybe<Int>
  email?: Maybe<String>
  email_not?: Maybe<String>
  email_in?: Maybe<String[] | String>
  email_not_in?: Maybe<String[] | String>
  email_lt?: Maybe<String>
  email_lte?: Maybe<String>
  email_gt?: Maybe<String>
  email_gte?: Maybe<String>
  email_contains?: Maybe<String>
  email_not_contains?: Maybe<String>
  email_starts_with?: Maybe<String>
  email_not_starts_with?: Maybe<String>
  email_ends_with?: Maybe<String>
  email_not_ends_with?: Maybe<String>
  firstName?: Maybe<String>
  firstName_not?: Maybe<String>
  firstName_in?: Maybe<String[] | String>
  firstName_not_in?: Maybe<String[] | String>
  firstName_lt?: Maybe<String>
  firstName_lte?: Maybe<String>
  firstName_gt?: Maybe<String>
  firstName_gte?: Maybe<String>
  firstName_contains?: Maybe<String>
  firstName_not_contains?: Maybe<String>
  firstName_starts_with?: Maybe<String>
  firstName_not_starts_with?: Maybe<String>
  firstName_ends_with?: Maybe<String>
  firstName_not_ends_with?: Maybe<String>
  lastName?: Maybe<String>
  lastName_not?: Maybe<String>
  lastName_in?: Maybe<String[] | String>
  lastName_not_in?: Maybe<String[] | String>
  lastName_lt?: Maybe<String>
  lastName_lte?: Maybe<String>
  lastName_gt?: Maybe<String>
  lastName_gte?: Maybe<String>
  lastName_contains?: Maybe<String>
  lastName_not_contains?: Maybe<String>
  lastName_starts_with?: Maybe<String>
  lastName_not_starts_with?: Maybe<String>
  lastName_ends_with?: Maybe<String>
  lastName_not_ends_with?: Maybe<String>
  comment?: Maybe<String>
  comment_not?: Maybe<String>
  comment_in?: Maybe<String[] | String>
  comment_not_in?: Maybe<String[] | String>
  comment_lt?: Maybe<String>
  comment_lte?: Maybe<String>
  comment_gt?: Maybe<String>
  comment_gte?: Maybe<String>
  comment_contains?: Maybe<String>
  comment_not_contains?: Maybe<String>
  comment_starts_with?: Maybe<String>
  comment_not_starts_with?: Maybe<String>
  comment_ends_with?: Maybe<String>
  comment_not_ends_with?: Maybe<String>
  createdAt?: Maybe<DateTimeInput>
  createdAt_not?: Maybe<DateTimeInput>
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  createdAt_lt?: Maybe<DateTimeInput>
  createdAt_lte?: Maybe<DateTimeInput>
  createdAt_gt?: Maybe<DateTimeInput>
  createdAt_gte?: Maybe<DateTimeInput>
  updatedAt?: Maybe<DateTimeInput>
  updatedAt_not?: Maybe<DateTimeInput>
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  updatedAt_lt?: Maybe<DateTimeInput>
  updatedAt_lte?: Maybe<DateTimeInput>
  updatedAt_gt?: Maybe<DateTimeInput>
  updatedAt_gte?: Maybe<DateTimeInput>
  deletedAt?: Maybe<DateTimeInput>
  deletedAt_not?: Maybe<DateTimeInput>
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  deletedAt_lt?: Maybe<DateTimeInput>
  deletedAt_lte?: Maybe<DateTimeInput>
  deletedAt_gt?: Maybe<DateTimeInput>
  deletedAt_gte?: Maybe<DateTimeInput>
  donatedAmount?: Maybe<Int>
  donatedAmount_not?: Maybe<Int>
  donatedAmount_in?: Maybe<Int[] | Int>
  donatedAmount_not_in?: Maybe<Int[] | Int>
  donatedAmount_lt?: Maybe<Int>
  donatedAmount_lte?: Maybe<Int>
  donatedAmount_gt?: Maybe<Int>
  donatedAmount_gte?: Maybe<Int>
  status?: Maybe<TransactionStatus>
  status_not?: Maybe<TransactionStatus>
  status_in?: Maybe<TransactionStatus[] | TransactionStatus>
  status_not_in?: Maybe<TransactionStatus[] | TransactionStatus>
  offer?: Maybe<OfferWhereInput>
  AND?: Maybe<TransactionWhereInput[] | TransactionWhereInput>
  OR?: Maybe<TransactionWhereInput[] | TransactionWhereInput>
  NOT?: Maybe<TransactionWhereInput[] | TransactionWhereInput>
}

export interface FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput
  update: FileUpdateDataInput
  create: FileCreateInput
}

export interface OfferWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  active?: Maybe<Boolean>
  active_not?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  publicOffer_not?: Maybe<Boolean>
  amount?: Maybe<Int>
  amount_not?: Maybe<Int>
  amount_in?: Maybe<Int[] | Int>
  amount_not_in?: Maybe<Int[] | Int>
  amount_lt?: Maybe<Int>
  amount_lte?: Maybe<Int>
  amount_gt?: Maybe<Int>
  amount_gte?: Maybe<Int>
  createdAt?: Maybe<DateTimeInput>
  createdAt_not?: Maybe<DateTimeInput>
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  createdAt_lt?: Maybe<DateTimeInput>
  createdAt_lte?: Maybe<DateTimeInput>
  createdAt_gt?: Maybe<DateTimeInput>
  createdAt_gte?: Maybe<DateTimeInput>
  updatedAt?: Maybe<DateTimeInput>
  updatedAt_not?: Maybe<DateTimeInput>
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  updatedAt_lt?: Maybe<DateTimeInput>
  updatedAt_lte?: Maybe<DateTimeInput>
  updatedAt_gt?: Maybe<DateTimeInput>
  updatedAt_gte?: Maybe<DateTimeInput>
  deletedAt?: Maybe<DateTimeInput>
  deletedAt_not?: Maybe<DateTimeInput>
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  deletedAt_lt?: Maybe<DateTimeInput>
  deletedAt_lte?: Maybe<DateTimeInput>
  deletedAt_gt?: Maybe<DateTimeInput>
  deletedAt_gte?: Maybe<DateTimeInput>
  email?: Maybe<String>
  email_not?: Maybe<String>
  email_in?: Maybe<String[] | String>
  email_not_in?: Maybe<String[] | String>
  email_lt?: Maybe<String>
  email_lte?: Maybe<String>
  email_gt?: Maybe<String>
  email_gte?: Maybe<String>
  email_contains?: Maybe<String>
  email_not_contains?: Maybe<String>
  email_starts_with?: Maybe<String>
  email_not_starts_with?: Maybe<String>
  email_ends_with?: Maybe<String>
  email_not_ends_with?: Maybe<String>
  firstName?: Maybe<String>
  firstName_not?: Maybe<String>
  firstName_in?: Maybe<String[] | String>
  firstName_not_in?: Maybe<String[] | String>
  firstName_lt?: Maybe<String>
  firstName_lte?: Maybe<String>
  firstName_gt?: Maybe<String>
  firstName_gte?: Maybe<String>
  firstName_contains?: Maybe<String>
  firstName_not_contains?: Maybe<String>
  firstName_starts_with?: Maybe<String>
  firstName_not_starts_with?: Maybe<String>
  firstName_ends_with?: Maybe<String>
  firstName_not_ends_with?: Maybe<String>
  lastName?: Maybe<String>
  lastName_not?: Maybe<String>
  lastName_in?: Maybe<String[] | String>
  lastName_not_in?: Maybe<String[] | String>
  lastName_lt?: Maybe<String>
  lastName_lte?: Maybe<String>
  lastName_gt?: Maybe<String>
  lastName_gte?: Maybe<String>
  lastName_contains?: Maybe<String>
  lastName_not_contains?: Maybe<String>
  lastName_starts_with?: Maybe<String>
  lastName_not_starts_with?: Maybe<String>
  lastName_ends_with?: Maybe<String>
  lastName_not_ends_with?: Maybe<String>
  transactions_every?: Maybe<TransactionWhereInput>
  transactions_some?: Maybe<TransactionWhereInput>
  transactions_none?: Maybe<TransactionWhereInput>
  beneficator?: Maybe<OrganizationWhereInput>
  price?: Maybe<Int>
  price_not?: Maybe<Int>
  price_in?: Maybe<Int[] | Int>
  price_not_in?: Maybe<Int[] | Int>
  price_lt?: Maybe<Int>
  price_lte?: Maybe<Int>
  price_gt?: Maybe<Int>
  price_gte?: Maybe<Int>
  name?: Maybe<String>
  name_not?: Maybe<String>
  name_in?: Maybe<String[] | String>
  name_not_in?: Maybe<String[] | String>
  name_lt?: Maybe<String>
  name_lte?: Maybe<String>
  name_gt?: Maybe<String>
  name_gte?: Maybe<String>
  name_contains?: Maybe<String>
  name_not_contains?: Maybe<String>
  name_starts_with?: Maybe<String>
  name_not_starts_with?: Maybe<String>
  name_ends_with?: Maybe<String>
  name_not_ends_with?: Maybe<String>
  user?: Maybe<UserWhereInput>
  description?: Maybe<String>
  description_not?: Maybe<String>
  description_in?: Maybe<String[] | String>
  description_not_in?: Maybe<String[] | String>
  description_lt?: Maybe<String>
  description_lte?: Maybe<String>
  description_gt?: Maybe<String>
  description_gte?: Maybe<String>
  description_contains?: Maybe<String>
  description_not_contains?: Maybe<String>
  description_starts_with?: Maybe<String>
  description_not_starts_with?: Maybe<String>
  description_ends_with?: Maybe<String>
  description_not_ends_with?: Maybe<String>
  transport?: Maybe<String>
  transport_not?: Maybe<String>
  transport_in?: Maybe<String[] | String>
  transport_not_in?: Maybe<String[] | String>
  transport_lt?: Maybe<String>
  transport_lte?: Maybe<String>
  transport_gt?: Maybe<String>
  transport_gte?: Maybe<String>
  transport_contains?: Maybe<String>
  transport_not_contains?: Maybe<String>
  transport_starts_with?: Maybe<String>
  transport_not_starts_with?: Maybe<String>
  transport_ends_with?: Maybe<String>
  transport_not_ends_with?: Maybe<String>
  gallery?: Maybe<GalleryWhereInput>
  AND?: Maybe<OfferWhereInput[] | OfferWhereInput>
  OR?: Maybe<OfferWhereInput[] | OfferWhereInput>
  NOT?: Maybe<OfferWhereInput[] | OfferWhereInput>
}

export interface FileScalarWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  key?: Maybe<String>
  key_not?: Maybe<String>
  key_in?: Maybe<String[] | String>
  key_not_in?: Maybe<String[] | String>
  key_lt?: Maybe<String>
  key_lte?: Maybe<String>
  key_gt?: Maybe<String>
  key_gte?: Maybe<String>
  key_contains?: Maybe<String>
  key_not_contains?: Maybe<String>
  key_starts_with?: Maybe<String>
  key_not_starts_with?: Maybe<String>
  key_ends_with?: Maybe<String>
  key_not_ends_with?: Maybe<String>
  fileName?: Maybe<String>
  fileName_not?: Maybe<String>
  fileName_in?: Maybe<String[] | String>
  fileName_not_in?: Maybe<String[] | String>
  fileName_lt?: Maybe<String>
  fileName_lte?: Maybe<String>
  fileName_gt?: Maybe<String>
  fileName_gte?: Maybe<String>
  fileName_contains?: Maybe<String>
  fileName_not_contains?: Maybe<String>
  fileName_starts_with?: Maybe<String>
  fileName_not_starts_with?: Maybe<String>
  fileName_ends_with?: Maybe<String>
  fileName_not_ends_with?: Maybe<String>
  mimeType?: Maybe<String>
  mimeType_not?: Maybe<String>
  mimeType_in?: Maybe<String[] | String>
  mimeType_not_in?: Maybe<String[] | String>
  mimeType_lt?: Maybe<String>
  mimeType_lte?: Maybe<String>
  mimeType_gt?: Maybe<String>
  mimeType_gte?: Maybe<String>
  mimeType_contains?: Maybe<String>
  mimeType_not_contains?: Maybe<String>
  mimeType_starts_with?: Maybe<String>
  mimeType_not_starts_with?: Maybe<String>
  mimeType_ends_with?: Maybe<String>
  mimeType_not_ends_with?: Maybe<String>
  encoding?: Maybe<String>
  encoding_not?: Maybe<String>
  encoding_in?: Maybe<String[] | String>
  encoding_not_in?: Maybe<String[] | String>
  encoding_lt?: Maybe<String>
  encoding_lte?: Maybe<String>
  encoding_gt?: Maybe<String>
  encoding_gte?: Maybe<String>
  encoding_contains?: Maybe<String>
  encoding_not_contains?: Maybe<String>
  encoding_starts_with?: Maybe<String>
  encoding_not_starts_with?: Maybe<String>
  encoding_ends_with?: Maybe<String>
  encoding_not_ends_with?: Maybe<String>
  url?: Maybe<String>
  url_not?: Maybe<String>
  url_in?: Maybe<String[] | String>
  url_not_in?: Maybe<String[] | String>
  url_lt?: Maybe<String>
  url_lte?: Maybe<String>
  url_gt?: Maybe<String>
  url_gte?: Maybe<String>
  url_contains?: Maybe<String>
  url_not_contains?: Maybe<String>
  url_starts_with?: Maybe<String>
  url_not_starts_with?: Maybe<String>
  url_ends_with?: Maybe<String>
  url_not_ends_with?: Maybe<String>
  AND?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>
  OR?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>
  NOT?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  email?: Maybe<String>
  email_not?: Maybe<String>
  email_in?: Maybe<String[] | String>
  email_not_in?: Maybe<String[] | String>
  email_lt?: Maybe<String>
  email_lte?: Maybe<String>
  email_gt?: Maybe<String>
  email_gte?: Maybe<String>
  email_contains?: Maybe<String>
  email_not_contains?: Maybe<String>
  email_starts_with?: Maybe<String>
  email_not_starts_with?: Maybe<String>
  email_ends_with?: Maybe<String>
  email_not_ends_with?: Maybe<String>
  firstName?: Maybe<String>
  firstName_not?: Maybe<String>
  firstName_in?: Maybe<String[] | String>
  firstName_not_in?: Maybe<String[] | String>
  firstName_lt?: Maybe<String>
  firstName_lte?: Maybe<String>
  firstName_gt?: Maybe<String>
  firstName_gte?: Maybe<String>
  firstName_contains?: Maybe<String>
  firstName_not_contains?: Maybe<String>
  firstName_starts_with?: Maybe<String>
  firstName_not_starts_with?: Maybe<String>
  firstName_ends_with?: Maybe<String>
  firstName_not_ends_with?: Maybe<String>
  lastName?: Maybe<String>
  lastName_not?: Maybe<String>
  lastName_in?: Maybe<String[] | String>
  lastName_not_in?: Maybe<String[] | String>
  lastName_lt?: Maybe<String>
  lastName_lte?: Maybe<String>
  lastName_gt?: Maybe<String>
  lastName_gte?: Maybe<String>
  lastName_contains?: Maybe<String>
  lastName_not_contains?: Maybe<String>
  lastName_starts_with?: Maybe<String>
  lastName_not_starts_with?: Maybe<String>
  lastName_ends_with?: Maybe<String>
  lastName_not_ends_with?: Maybe<String>
  password?: Maybe<String>
  password_not?: Maybe<String>
  password_in?: Maybe<String[] | String>
  password_not_in?: Maybe<String[] | String>
  password_lt?: Maybe<String>
  password_lte?: Maybe<String>
  password_gt?: Maybe<String>
  password_gte?: Maybe<String>
  password_contains?: Maybe<String>
  password_not_contains?: Maybe<String>
  password_starts_with?: Maybe<String>
  password_not_starts_with?: Maybe<String>
  password_ends_with?: Maybe<String>
  password_not_ends_with?: Maybe<String>
  role?: Maybe<UserRole>
  role_not?: Maybe<UserRole>
  role_in?: Maybe<UserRole[] | UserRole>
  role_not_in?: Maybe<UserRole[] | UserRole>
  offers_every?: Maybe<OfferWhereInput>
  offers_some?: Maybe<OfferWhereInput>
  offers_none?: Maybe<OfferWhereInput>
  adress?: Maybe<AdressWhereInput>
  AND?: Maybe<UserWhereInput[] | UserWhereInput>
  OR?: Maybe<UserWhereInput[] | UserWhereInput>
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>
}

export interface FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput
  data: FileUpdateManyDataInput
}

export interface OfferUpdateWithWhereUniqueWithoutUserInput {
  where: OfferWhereUniqueInput
  data: OfferUpdateWithoutUserDataInput
}

export interface FileUpdateManyDataInput {
  key?: Maybe<String>
  fileName?: Maybe<String>
  mimeType?: Maybe<String>
  encoding?: Maybe<String>
  url?: Maybe<String>
}

export interface UserUpdateInput {
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  password?: Maybe<String>
  role?: Maybe<UserRole>
  offers?: Maybe<OfferUpdateManyWithoutUserInput>
  adress?: Maybe<AdressUpdateOneInput>
}

export interface OfferCreateInput {
  id?: Maybe<ID_Input>
  active?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  amount: Int
  deletedAt?: Maybe<DateTimeInput>
  email: String
  firstName: String
  lastName: String
  transactions?: Maybe<TransactionCreateManyWithoutOfferInput>
  beneficator: OrganizationCreateOneWithoutOffersInput
  price: Int
  name: String
  user: UserCreateOneWithoutOffersInput
  description: String
  transport?: Maybe<String>
  gallery: GalleryCreateOneInput
}

export interface OfferCreateManyWithoutUserInput {
  create?: Maybe<OfferCreateWithoutUserInput[] | OfferCreateWithoutUserInput>
  connect?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>
}

export interface TransactionCreateManyWithoutOfferInput {
  create?: Maybe<
    TransactionCreateWithoutOfferInput[] | TransactionCreateWithoutOfferInput
  >
  connect?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>
}

export interface TransactionUpdateManyMutationInput {
  amount?: Maybe<Int>
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  comment?: Maybe<String>
  deletedAt?: Maybe<DateTimeInput>
  donatedAmount?: Maybe<Int>
  status?: Maybe<TransactionStatus>
}

export interface TransactionCreateWithoutOfferInput {
  id?: Maybe<ID_Input>
  amount: Int
  email: String
  firstName: String
  lastName: String
  comment?: Maybe<String>
  deletedAt?: Maybe<DateTimeInput>
  donatedAmount?: Maybe<Int>
  status?: Maybe<TransactionStatus>
}

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>
}>

export interface OrganizationCreateOneWithoutOffersInput {
  create?: Maybe<OrganizationCreateWithoutOffersInput>
  connect?: Maybe<OrganizationWhereUniqueInput>
}

export interface OfferUpdateWithoutTransactionsDataInput {
  active?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  amount?: Maybe<Int>
  deletedAt?: Maybe<DateTimeInput>
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  beneficator?: Maybe<OrganizationUpdateOneRequiredWithoutOffersInput>
  price?: Maybe<Int>
  name?: Maybe<String>
  user?: Maybe<UserUpdateOneRequiredWithoutOffersInput>
  description?: Maybe<String>
  transport?: Maybe<String>
  gallery?: Maybe<GalleryUpdateOneRequiredInput>
}

export interface OfferUpdateWithWhereUniqueWithoutBeneficatorInput {
  where: OfferWhereUniqueInput
  data: OfferUpdateWithoutBeneficatorDataInput
}

export interface TransactionUpdateInput {
  amount?: Maybe<Int>
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  comment?: Maybe<String>
  deletedAt?: Maybe<DateTimeInput>
  donatedAmount?: Maybe<Int>
  status?: Maybe<TransactionStatus>
  offer?: Maybe<OfferUpdateOneRequiredWithoutTransactionsInput>
}

export interface FileCreateOneInput {
  create?: Maybe<FileCreateInput>
  connect?: Maybe<FileWhereUniqueInput>
}

export interface OfferCreateWithoutTransactionsInput {
  id?: Maybe<ID_Input>
  active?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  amount: Int
  deletedAt?: Maybe<DateTimeInput>
  email: String
  firstName: String
  lastName: String
  beneficator: OrganizationCreateOneWithoutOffersInput
  price: Int
  name: String
  user: UserCreateOneWithoutOffersInput
  description: String
  transport?: Maybe<String>
  gallery: GalleryCreateOneInput
}

export interface UserCreateOneWithoutOffersInput {
  create?: Maybe<UserCreateWithoutOffersInput>
  connect?: Maybe<UserWhereUniqueInput>
}

export interface TransactionCreateInput {
  id?: Maybe<ID_Input>
  amount: Int
  email: String
  firstName: String
  lastName: String
  comment?: Maybe<String>
  deletedAt?: Maybe<DateTimeInput>
  donatedAmount?: Maybe<Int>
  status?: Maybe<TransactionStatus>
  offer: OfferCreateOneWithoutTransactionsInput
}

export interface UserCreateWithoutOffersInput {
  id?: Maybe<ID_Input>
  email: String
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  password?: Maybe<String>
  role?: Maybe<UserRole>
  adress?: Maybe<AdressCreateOneInput>
}

export interface OrganizationUpdateManyMutationInput {
  apiId?: Maybe<Int>
  apiSecret?: Maybe<String>
  organizationId?: Maybe<Int>
  active?: Maybe<Boolean>
  deletedAt?: Maybe<DateTimeInput>
  name?: Maybe<String>
  projectId?: Maybe<Int>
  description?: Maybe<String>
  url?: Maybe<String>
}

export interface AdressCreateOneInput {
  create?: Maybe<AdressCreateInput>
  connect?: Maybe<AdressWhereUniqueInput>
}

export interface OfferUpdateManyWithWhereNestedInput {
  where: OfferScalarWhereInput
  data: OfferUpdateManyDataInput
}

export interface GalleryCreateOneInput {
  create?: Maybe<GalleryCreateInput>
  connect?: Maybe<GalleryWhereUniqueInput>
}

export interface AdressUpdateInput {
  city?: Maybe<String>
  street?: Maybe<String>
  postalCode?: Maybe<String>
}

export interface OfferUpdateManyWithoutBeneficatorInput {
  create?: Maybe<
    OfferCreateWithoutBeneficatorInput[] | OfferCreateWithoutBeneficatorInput
  >
  delete?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>
  connect?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>
  set?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>
  disconnect?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>
  update?: Maybe<
    | OfferUpdateWithWhereUniqueWithoutBeneficatorInput[]
    | OfferUpdateWithWhereUniqueWithoutBeneficatorInput
  >
  upsert?: Maybe<
    | OfferUpsertWithWhereUniqueWithoutBeneficatorInput[]
    | OfferUpsertWithWhereUniqueWithoutBeneficatorInput
  >
  deleteMany?: Maybe<OfferScalarWhereInput[] | OfferScalarWhereInput>
  updateMany?: Maybe<
    OfferUpdateManyWithWhereNestedInput[] | OfferUpdateManyWithWhereNestedInput
  >
}

export interface OfferUpsertWithWhereUniqueWithoutBeneficatorInput {
  where: OfferWhereUniqueInput
  update: OfferUpdateWithoutBeneficatorDataInput
  create: OfferCreateWithoutBeneficatorInput
}

export interface OrganizationUpdateInput {
  apiId?: Maybe<Int>
  apiSecret?: Maybe<String>
  organizationId?: Maybe<Int>
  active?: Maybe<Boolean>
  logo?: Maybe<FileUpdateOneRequiredInput>
  deletedAt?: Maybe<DateTimeInput>
  name?: Maybe<String>
  offers?: Maybe<OfferUpdateManyWithoutBeneficatorInput>
  projectId?: Maybe<Int>
  description?: Maybe<String>
  url?: Maybe<String>
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>
  key: String
  fileName: String
  mimeType: String
  encoding: String
  url: String
}

export interface OfferCreateWithoutBeneficatorInput {
  id?: Maybe<ID_Input>
  active?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  amount: Int
  deletedAt?: Maybe<DateTimeInput>
  email: String
  firstName: String
  lastName: String
  transactions?: Maybe<TransactionCreateManyWithoutOfferInput>
  price: Int
  name: String
  user: UserCreateOneWithoutOffersInput
  description: String
  transport?: Maybe<String>
  gallery: GalleryCreateOneInput
}

export interface TransactionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>
  updatedFields_contains?: Maybe<String>
  updatedFields_contains_every?: Maybe<String[] | String>
  updatedFields_contains_some?: Maybe<String[] | String>
  node?: Maybe<TransactionWhereInput>
  AND?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >
  OR?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >
  NOT?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >
}

export interface TransactionUpdateWithoutOfferDataInput {
  amount?: Maybe<Int>
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  comment?: Maybe<String>
  deletedAt?: Maybe<DateTimeInput>
  donatedAmount?: Maybe<Int>
  status?: Maybe<TransactionStatus>
}

export interface GallerySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>
  updatedFields_contains?: Maybe<String>
  updatedFields_contains_every?: Maybe<String[] | String>
  updatedFields_contains_some?: Maybe<String[] | String>
  node?: Maybe<GalleryWhereInput>
  AND?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>
  OR?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>
  NOT?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>
}

export interface TransactionUpsertWithWhereUniqueWithoutOfferInput {
  where: TransactionWhereUniqueInput
  update: TransactionUpdateWithoutOfferDataInput
  create: TransactionCreateWithoutOfferInput
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  password?: Maybe<String>
  role?: Maybe<UserRole>
}

export interface TransactionScalarWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  amount?: Maybe<Int>
  amount_not?: Maybe<Int>
  amount_in?: Maybe<Int[] | Int>
  amount_not_in?: Maybe<Int[] | Int>
  amount_lt?: Maybe<Int>
  amount_lte?: Maybe<Int>
  amount_gt?: Maybe<Int>
  amount_gte?: Maybe<Int>
  email?: Maybe<String>
  email_not?: Maybe<String>
  email_in?: Maybe<String[] | String>
  email_not_in?: Maybe<String[] | String>
  email_lt?: Maybe<String>
  email_lte?: Maybe<String>
  email_gt?: Maybe<String>
  email_gte?: Maybe<String>
  email_contains?: Maybe<String>
  email_not_contains?: Maybe<String>
  email_starts_with?: Maybe<String>
  email_not_starts_with?: Maybe<String>
  email_ends_with?: Maybe<String>
  email_not_ends_with?: Maybe<String>
  firstName?: Maybe<String>
  firstName_not?: Maybe<String>
  firstName_in?: Maybe<String[] | String>
  firstName_not_in?: Maybe<String[] | String>
  firstName_lt?: Maybe<String>
  firstName_lte?: Maybe<String>
  firstName_gt?: Maybe<String>
  firstName_gte?: Maybe<String>
  firstName_contains?: Maybe<String>
  firstName_not_contains?: Maybe<String>
  firstName_starts_with?: Maybe<String>
  firstName_not_starts_with?: Maybe<String>
  firstName_ends_with?: Maybe<String>
  firstName_not_ends_with?: Maybe<String>
  lastName?: Maybe<String>
  lastName_not?: Maybe<String>
  lastName_in?: Maybe<String[] | String>
  lastName_not_in?: Maybe<String[] | String>
  lastName_lt?: Maybe<String>
  lastName_lte?: Maybe<String>
  lastName_gt?: Maybe<String>
  lastName_gte?: Maybe<String>
  lastName_contains?: Maybe<String>
  lastName_not_contains?: Maybe<String>
  lastName_starts_with?: Maybe<String>
  lastName_not_starts_with?: Maybe<String>
  lastName_ends_with?: Maybe<String>
  lastName_not_ends_with?: Maybe<String>
  comment?: Maybe<String>
  comment_not?: Maybe<String>
  comment_in?: Maybe<String[] | String>
  comment_not_in?: Maybe<String[] | String>
  comment_lt?: Maybe<String>
  comment_lte?: Maybe<String>
  comment_gt?: Maybe<String>
  comment_gte?: Maybe<String>
  comment_contains?: Maybe<String>
  comment_not_contains?: Maybe<String>
  comment_starts_with?: Maybe<String>
  comment_not_starts_with?: Maybe<String>
  comment_ends_with?: Maybe<String>
  comment_not_ends_with?: Maybe<String>
  createdAt?: Maybe<DateTimeInput>
  createdAt_not?: Maybe<DateTimeInput>
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  createdAt_lt?: Maybe<DateTimeInput>
  createdAt_lte?: Maybe<DateTimeInput>
  createdAt_gt?: Maybe<DateTimeInput>
  createdAt_gte?: Maybe<DateTimeInput>
  updatedAt?: Maybe<DateTimeInput>
  updatedAt_not?: Maybe<DateTimeInput>
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  updatedAt_lt?: Maybe<DateTimeInput>
  updatedAt_lte?: Maybe<DateTimeInput>
  updatedAt_gt?: Maybe<DateTimeInput>
  updatedAt_gte?: Maybe<DateTimeInput>
  deletedAt?: Maybe<DateTimeInput>
  deletedAt_not?: Maybe<DateTimeInput>
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  deletedAt_lt?: Maybe<DateTimeInput>
  deletedAt_lte?: Maybe<DateTimeInput>
  deletedAt_gt?: Maybe<DateTimeInput>
  deletedAt_gte?: Maybe<DateTimeInput>
  donatedAmount?: Maybe<Int>
  donatedAmount_not?: Maybe<Int>
  donatedAmount_in?: Maybe<Int[] | Int>
  donatedAmount_not_in?: Maybe<Int[] | Int>
  donatedAmount_lt?: Maybe<Int>
  donatedAmount_lte?: Maybe<Int>
  donatedAmount_gt?: Maybe<Int>
  donatedAmount_gte?: Maybe<Int>
  status?: Maybe<TransactionStatus>
  status_not?: Maybe<TransactionStatus>
  status_in?: Maybe<TransactionStatus[] | TransactionStatus>
  status_not_in?: Maybe<TransactionStatus[] | TransactionStatus>
  AND?: Maybe<TransactionScalarWhereInput[] | TransactionScalarWhereInput>
  OR?: Maybe<TransactionScalarWhereInput[] | TransactionScalarWhereInput>
  NOT?: Maybe<TransactionScalarWhereInput[] | TransactionScalarWhereInput>
}

export interface OrganizationWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  apiId?: Maybe<Int>
  apiId_not?: Maybe<Int>
  apiId_in?: Maybe<Int[] | Int>
  apiId_not_in?: Maybe<Int[] | Int>
  apiId_lt?: Maybe<Int>
  apiId_lte?: Maybe<Int>
  apiId_gt?: Maybe<Int>
  apiId_gte?: Maybe<Int>
  apiSecret?: Maybe<String>
  apiSecret_not?: Maybe<String>
  apiSecret_in?: Maybe<String[] | String>
  apiSecret_not_in?: Maybe<String[] | String>
  apiSecret_lt?: Maybe<String>
  apiSecret_lte?: Maybe<String>
  apiSecret_gt?: Maybe<String>
  apiSecret_gte?: Maybe<String>
  apiSecret_contains?: Maybe<String>
  apiSecret_not_contains?: Maybe<String>
  apiSecret_starts_with?: Maybe<String>
  apiSecret_not_starts_with?: Maybe<String>
  apiSecret_ends_with?: Maybe<String>
  apiSecret_not_ends_with?: Maybe<String>
  organizationId?: Maybe<Int>
  organizationId_not?: Maybe<Int>
  organizationId_in?: Maybe<Int[] | Int>
  organizationId_not_in?: Maybe<Int[] | Int>
  organizationId_lt?: Maybe<Int>
  organizationId_lte?: Maybe<Int>
  organizationId_gt?: Maybe<Int>
  organizationId_gte?: Maybe<Int>
  active?: Maybe<Boolean>
  active_not?: Maybe<Boolean>
  logo?: Maybe<FileWhereInput>
  createdAt?: Maybe<DateTimeInput>
  createdAt_not?: Maybe<DateTimeInput>
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  createdAt_lt?: Maybe<DateTimeInput>
  createdAt_lte?: Maybe<DateTimeInput>
  createdAt_gt?: Maybe<DateTimeInput>
  createdAt_gte?: Maybe<DateTimeInput>
  updatedAt?: Maybe<DateTimeInput>
  updatedAt_not?: Maybe<DateTimeInput>
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  updatedAt_lt?: Maybe<DateTimeInput>
  updatedAt_lte?: Maybe<DateTimeInput>
  updatedAt_gt?: Maybe<DateTimeInput>
  updatedAt_gte?: Maybe<DateTimeInput>
  deletedAt?: Maybe<DateTimeInput>
  deletedAt_not?: Maybe<DateTimeInput>
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  deletedAt_lt?: Maybe<DateTimeInput>
  deletedAt_lte?: Maybe<DateTimeInput>
  deletedAt_gt?: Maybe<DateTimeInput>
  deletedAt_gte?: Maybe<DateTimeInput>
  name?: Maybe<String>
  name_not?: Maybe<String>
  name_in?: Maybe<String[] | String>
  name_not_in?: Maybe<String[] | String>
  name_lt?: Maybe<String>
  name_lte?: Maybe<String>
  name_gt?: Maybe<String>
  name_gte?: Maybe<String>
  name_contains?: Maybe<String>
  name_not_contains?: Maybe<String>
  name_starts_with?: Maybe<String>
  name_not_starts_with?: Maybe<String>
  name_ends_with?: Maybe<String>
  name_not_ends_with?: Maybe<String>
  offers_every?: Maybe<OfferWhereInput>
  offers_some?: Maybe<OfferWhereInput>
  offers_none?: Maybe<OfferWhereInput>
  projectId?: Maybe<Int>
  projectId_not?: Maybe<Int>
  projectId_in?: Maybe<Int[] | Int>
  projectId_not_in?: Maybe<Int[] | Int>
  projectId_lt?: Maybe<Int>
  projectId_lte?: Maybe<Int>
  projectId_gt?: Maybe<Int>
  projectId_gte?: Maybe<Int>
  description?: Maybe<String>
  description_not?: Maybe<String>
  description_in?: Maybe<String[] | String>
  description_not_in?: Maybe<String[] | String>
  description_lt?: Maybe<String>
  description_lte?: Maybe<String>
  description_gt?: Maybe<String>
  description_gte?: Maybe<String>
  description_contains?: Maybe<String>
  description_not_contains?: Maybe<String>
  description_starts_with?: Maybe<String>
  description_not_starts_with?: Maybe<String>
  description_ends_with?: Maybe<String>
  description_not_ends_with?: Maybe<String>
  url?: Maybe<String>
  url_not?: Maybe<String>
  url_in?: Maybe<String[] | String>
  url_not_in?: Maybe<String[] | String>
  url_lt?: Maybe<String>
  url_lte?: Maybe<String>
  url_gt?: Maybe<String>
  url_gte?: Maybe<String>
  url_contains?: Maybe<String>
  url_not_contains?: Maybe<String>
  url_starts_with?: Maybe<String>
  url_not_starts_with?: Maybe<String>
  url_ends_with?: Maybe<String>
  url_not_ends_with?: Maybe<String>
  AND?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>
  OR?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>
  NOT?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>
}

export interface TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput
  data: TransactionUpdateManyDataInput
}

export interface OfferUpdateManyWithoutUserInput {
  create?: Maybe<OfferCreateWithoutUserInput[] | OfferCreateWithoutUserInput>
  delete?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>
  connect?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>
  set?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>
  disconnect?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>
  update?: Maybe<
    | OfferUpdateWithWhereUniqueWithoutUserInput[]
    | OfferUpdateWithWhereUniqueWithoutUserInput
  >
  upsert?: Maybe<
    | OfferUpsertWithWhereUniqueWithoutUserInput[]
    | OfferUpsertWithWhereUniqueWithoutUserInput
  >
  deleteMany?: Maybe<OfferScalarWhereInput[] | OfferScalarWhereInput>
  updateMany?: Maybe<
    OfferUpdateManyWithWhereNestedInput[] | OfferUpdateManyWithWhereNestedInput
  >
}

export interface TransactionUpdateManyDataInput {
  amount?: Maybe<Int>
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  comment?: Maybe<String>
  deletedAt?: Maybe<DateTimeInput>
  donatedAmount?: Maybe<Int>
  status?: Maybe<TransactionStatus>
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>
  email: String
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  password?: Maybe<String>
  role?: Maybe<UserRole>
  offers?: Maybe<OfferCreateManyWithoutUserInput>
  adress?: Maybe<AdressCreateOneInput>
}

export interface OrganizationUpdateOneRequiredWithoutOffersInput {
  create?: Maybe<OrganizationCreateWithoutOffersInput>
  update?: Maybe<OrganizationUpdateWithoutOffersDataInput>
  upsert?: Maybe<OrganizationUpsertWithoutOffersInput>
  connect?: Maybe<OrganizationWhereUniqueInput>
}

export interface AdressWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  city?: Maybe<String>
  city_not?: Maybe<String>
  city_in?: Maybe<String[] | String>
  city_not_in?: Maybe<String[] | String>
  city_lt?: Maybe<String>
  city_lte?: Maybe<String>
  city_gt?: Maybe<String>
  city_gte?: Maybe<String>
  city_contains?: Maybe<String>
  city_not_contains?: Maybe<String>
  city_starts_with?: Maybe<String>
  city_not_starts_with?: Maybe<String>
  city_ends_with?: Maybe<String>
  city_not_ends_with?: Maybe<String>
  street?: Maybe<String>
  street_not?: Maybe<String>
  street_in?: Maybe<String[] | String>
  street_not_in?: Maybe<String[] | String>
  street_lt?: Maybe<String>
  street_lte?: Maybe<String>
  street_gt?: Maybe<String>
  street_gte?: Maybe<String>
  street_contains?: Maybe<String>
  street_not_contains?: Maybe<String>
  street_starts_with?: Maybe<String>
  street_not_starts_with?: Maybe<String>
  street_ends_with?: Maybe<String>
  street_not_ends_with?: Maybe<String>
  postalCode?: Maybe<String>
  postalCode_not?: Maybe<String>
  postalCode_in?: Maybe<String[] | String>
  postalCode_not_in?: Maybe<String[] | String>
  postalCode_lt?: Maybe<String>
  postalCode_lte?: Maybe<String>
  postalCode_gt?: Maybe<String>
  postalCode_gte?: Maybe<String>
  postalCode_contains?: Maybe<String>
  postalCode_not_contains?: Maybe<String>
  postalCode_starts_with?: Maybe<String>
  postalCode_not_starts_with?: Maybe<String>
  postalCode_ends_with?: Maybe<String>
  postalCode_not_ends_with?: Maybe<String>
  AND?: Maybe<AdressWhereInput[] | AdressWhereInput>
  OR?: Maybe<AdressWhereInput[] | AdressWhereInput>
  NOT?: Maybe<AdressWhereInput[] | AdressWhereInput>
}

export interface OrganizationUpdateWithoutOffersDataInput {
  apiId?: Maybe<Int>
  apiSecret?: Maybe<String>
  organizationId?: Maybe<Int>
  active?: Maybe<Boolean>
  logo?: Maybe<FileUpdateOneRequiredInput>
  deletedAt?: Maybe<DateTimeInput>
  name?: Maybe<String>
  projectId?: Maybe<Int>
  description?: Maybe<String>
  url?: Maybe<String>
}

export type TransactionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>
}>

export interface FileUpdateOneRequiredInput {
  create?: Maybe<FileCreateInput>
  update?: Maybe<FileUpdateDataInput>
  upsert?: Maybe<FileUpsertNestedInput>
  connect?: Maybe<FileWhereUniqueInput>
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>
  email?: Maybe<String>
}>

export interface FileUpsertNestedInput {
  update: FileUpdateDataInput
  create: FileCreateInput
}

export interface OfferScalarWhereInput {
  id?: Maybe<ID_Input>
  id_not?: Maybe<ID_Input>
  id_in?: Maybe<ID_Input[] | ID_Input>
  id_not_in?: Maybe<ID_Input[] | ID_Input>
  id_lt?: Maybe<ID_Input>
  id_lte?: Maybe<ID_Input>
  id_gt?: Maybe<ID_Input>
  id_gte?: Maybe<ID_Input>
  id_contains?: Maybe<ID_Input>
  id_not_contains?: Maybe<ID_Input>
  id_starts_with?: Maybe<ID_Input>
  id_not_starts_with?: Maybe<ID_Input>
  id_ends_with?: Maybe<ID_Input>
  id_not_ends_with?: Maybe<ID_Input>
  active?: Maybe<Boolean>
  active_not?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  publicOffer_not?: Maybe<Boolean>
  amount?: Maybe<Int>
  amount_not?: Maybe<Int>
  amount_in?: Maybe<Int[] | Int>
  amount_not_in?: Maybe<Int[] | Int>
  amount_lt?: Maybe<Int>
  amount_lte?: Maybe<Int>
  amount_gt?: Maybe<Int>
  amount_gte?: Maybe<Int>
  createdAt?: Maybe<DateTimeInput>
  createdAt_not?: Maybe<DateTimeInput>
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  createdAt_lt?: Maybe<DateTimeInput>
  createdAt_lte?: Maybe<DateTimeInput>
  createdAt_gt?: Maybe<DateTimeInput>
  createdAt_gte?: Maybe<DateTimeInput>
  updatedAt?: Maybe<DateTimeInput>
  updatedAt_not?: Maybe<DateTimeInput>
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  updatedAt_lt?: Maybe<DateTimeInput>
  updatedAt_lte?: Maybe<DateTimeInput>
  updatedAt_gt?: Maybe<DateTimeInput>
  updatedAt_gte?: Maybe<DateTimeInput>
  deletedAt?: Maybe<DateTimeInput>
  deletedAt_not?: Maybe<DateTimeInput>
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>
  deletedAt_lt?: Maybe<DateTimeInput>
  deletedAt_lte?: Maybe<DateTimeInput>
  deletedAt_gt?: Maybe<DateTimeInput>
  deletedAt_gte?: Maybe<DateTimeInput>
  email?: Maybe<String>
  email_not?: Maybe<String>
  email_in?: Maybe<String[] | String>
  email_not_in?: Maybe<String[] | String>
  email_lt?: Maybe<String>
  email_lte?: Maybe<String>
  email_gt?: Maybe<String>
  email_gte?: Maybe<String>
  email_contains?: Maybe<String>
  email_not_contains?: Maybe<String>
  email_starts_with?: Maybe<String>
  email_not_starts_with?: Maybe<String>
  email_ends_with?: Maybe<String>
  email_not_ends_with?: Maybe<String>
  firstName?: Maybe<String>
  firstName_not?: Maybe<String>
  firstName_in?: Maybe<String[] | String>
  firstName_not_in?: Maybe<String[] | String>
  firstName_lt?: Maybe<String>
  firstName_lte?: Maybe<String>
  firstName_gt?: Maybe<String>
  firstName_gte?: Maybe<String>
  firstName_contains?: Maybe<String>
  firstName_not_contains?: Maybe<String>
  firstName_starts_with?: Maybe<String>
  firstName_not_starts_with?: Maybe<String>
  firstName_ends_with?: Maybe<String>
  firstName_not_ends_with?: Maybe<String>
  lastName?: Maybe<String>
  lastName_not?: Maybe<String>
  lastName_in?: Maybe<String[] | String>
  lastName_not_in?: Maybe<String[] | String>
  lastName_lt?: Maybe<String>
  lastName_lte?: Maybe<String>
  lastName_gt?: Maybe<String>
  lastName_gte?: Maybe<String>
  lastName_contains?: Maybe<String>
  lastName_not_contains?: Maybe<String>
  lastName_starts_with?: Maybe<String>
  lastName_not_starts_with?: Maybe<String>
  lastName_ends_with?: Maybe<String>
  lastName_not_ends_with?: Maybe<String>
  price?: Maybe<Int>
  price_not?: Maybe<Int>
  price_in?: Maybe<Int[] | Int>
  price_not_in?: Maybe<Int[] | Int>
  price_lt?: Maybe<Int>
  price_lte?: Maybe<Int>
  price_gt?: Maybe<Int>
  price_gte?: Maybe<Int>
  name?: Maybe<String>
  name_not?: Maybe<String>
  name_in?: Maybe<String[] | String>
  name_not_in?: Maybe<String[] | String>
  name_lt?: Maybe<String>
  name_lte?: Maybe<String>
  name_gt?: Maybe<String>
  name_gte?: Maybe<String>
  name_contains?: Maybe<String>
  name_not_contains?: Maybe<String>
  name_starts_with?: Maybe<String>
  name_not_starts_with?: Maybe<String>
  name_ends_with?: Maybe<String>
  name_not_ends_with?: Maybe<String>
  description?: Maybe<String>
  description_not?: Maybe<String>
  description_in?: Maybe<String[] | String>
  description_not_in?: Maybe<String[] | String>
  description_lt?: Maybe<String>
  description_lte?: Maybe<String>
  description_gt?: Maybe<String>
  description_gte?: Maybe<String>
  description_contains?: Maybe<String>
  description_not_contains?: Maybe<String>
  description_starts_with?: Maybe<String>
  description_not_starts_with?: Maybe<String>
  description_ends_with?: Maybe<String>
  description_not_ends_with?: Maybe<String>
  transport?: Maybe<String>
  transport_not?: Maybe<String>
  transport_in?: Maybe<String[] | String>
  transport_not_in?: Maybe<String[] | String>
  transport_lt?: Maybe<String>
  transport_lte?: Maybe<String>
  transport_gt?: Maybe<String>
  transport_gte?: Maybe<String>
  transport_contains?: Maybe<String>
  transport_not_contains?: Maybe<String>
  transport_starts_with?: Maybe<String>
  transport_not_starts_with?: Maybe<String>
  transport_ends_with?: Maybe<String>
  transport_not_ends_with?: Maybe<String>
  AND?: Maybe<OfferScalarWhereInput[] | OfferScalarWhereInput>
  OR?: Maybe<OfferScalarWhereInput[] | OfferScalarWhereInput>
  NOT?: Maybe<OfferScalarWhereInput[] | OfferScalarWhereInput>
}

export interface OrganizationUpsertWithoutOffersInput {
  update: OrganizationUpdateWithoutOffersDataInput
  create: OrganizationCreateWithoutOffersInput
}

export interface AdressUpdateManyMutationInput {
  city?: Maybe<String>
  street?: Maybe<String>
  postalCode?: Maybe<String>
}

export interface UserUpdateOneRequiredWithoutOffersInput {
  create?: Maybe<UserCreateWithoutOffersInput>
  update?: Maybe<UserUpdateWithoutOffersDataInput>
  upsert?: Maybe<UserUpsertWithoutOffersInput>
  connect?: Maybe<UserWhereUniqueInput>
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>
  updatedFields_contains?: Maybe<String>
  updatedFields_contains_every?: Maybe<String[] | String>
  updatedFields_contains_some?: Maybe<String[] | String>
  node?: Maybe<UserWhereInput>
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>
}

export interface UserUpdateWithoutOffersDataInput {
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  password?: Maybe<String>
  role?: Maybe<UserRole>
  adress?: Maybe<AdressUpdateOneInput>
}

export type OfferWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>
}>

export interface AdressUpdateOneInput {
  create?: Maybe<AdressCreateInput>
  update?: Maybe<AdressUpdateDataInput>
  upsert?: Maybe<AdressUpsertNestedInput>
  delete?: Maybe<Boolean>
  disconnect?: Maybe<Boolean>
  connect?: Maybe<AdressWhereUniqueInput>
}

export interface OfferUpdateWithoutUserDataInput {
  active?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  amount?: Maybe<Int>
  deletedAt?: Maybe<DateTimeInput>
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  transactions?: Maybe<TransactionUpdateManyWithoutOfferInput>
  beneficator?: Maybe<OrganizationUpdateOneRequiredWithoutOffersInput>
  price?: Maybe<Int>
  name?: Maybe<String>
  description?: Maybe<String>
  transport?: Maybe<String>
  gallery?: Maybe<GalleryUpdateOneRequiredInput>
}

export interface AdressUpdateDataInput {
  city?: Maybe<String>
  street?: Maybe<String>
  postalCode?: Maybe<String>
}

export interface OfferUpsertWithoutTransactionsInput {
  update: OfferUpdateWithoutTransactionsDataInput
  create: OfferCreateWithoutTransactionsInput
}

export interface AdressUpsertNestedInput {
  update: AdressUpdateDataInput
  create: AdressCreateInput
}

export interface OfferCreateOneWithoutTransactionsInput {
  create?: Maybe<OfferCreateWithoutTransactionsInput>
  connect?: Maybe<OfferWhereUniqueInput>
}

export interface UserUpsertWithoutOffersInput {
  update: UserUpdateWithoutOffersDataInput
  create: UserCreateWithoutOffersInput
}

export interface AdressCreateInput {
  id?: Maybe<ID_Input>
  city?: Maybe<String>
  street?: Maybe<String>
  postalCode?: Maybe<String>
}

export interface GalleryUpdateOneRequiredInput {
  create?: Maybe<GalleryCreateInput>
  update?: Maybe<GalleryUpdateDataInput>
  upsert?: Maybe<GalleryUpsertNestedInput>
  connect?: Maybe<GalleryWhereUniqueInput>
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>
  updatedFields_contains?: Maybe<String>
  updatedFields_contains_every?: Maybe<String[] | String>
  updatedFields_contains_some?: Maybe<String[] | String>
  node?: Maybe<OrganizationWhereInput>
  AND?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >
  OR?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >
  NOT?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >
}

export interface OrganizationCreateInput {
  id?: Maybe<ID_Input>
  apiId?: Maybe<Int>
  apiSecret?: Maybe<String>
  organizationId?: Maybe<Int>
  active: Boolean
  logo: FileCreateOneInput
  deletedAt?: Maybe<DateTimeInput>
  name: String
  offers?: Maybe<OfferCreateManyWithoutBeneficatorInput>
  projectId?: Maybe<Int>
  description: String
  url: String
}

export interface OfferUpdateManyMutationInput {
  active?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  amount?: Maybe<Int>
  deletedAt?: Maybe<DateTimeInput>
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  price?: Maybe<Int>
  name?: Maybe<String>
  description?: Maybe<String>
  transport?: Maybe<String>
}

export interface GalleryUpsertNestedInput {
  update: GalleryUpdateDataInput
  create: GalleryCreateInput
}

export interface GalleryUpdateDataInput {
  images?: Maybe<FileUpdateManyInput>
}

export interface OfferUpsertWithWhereUniqueWithoutUserInput {
  where: OfferWhereUniqueInput
  update: OfferUpdateWithoutUserDataInput
  create: OfferCreateWithoutUserInput
}

export interface OfferUpdateWithoutBeneficatorDataInput {
  active?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  amount?: Maybe<Int>
  deletedAt?: Maybe<DateTimeInput>
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  transactions?: Maybe<TransactionUpdateManyWithoutOfferInput>
  price?: Maybe<Int>
  name?: Maybe<String>
  user?: Maybe<UserUpdateOneRequiredWithoutOffersInput>
  description?: Maybe<String>
  transport?: Maybe<String>
  gallery?: Maybe<GalleryUpdateOneRequiredInput>
}

export interface OfferUpdateManyDataInput {
  active?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  amount?: Maybe<Int>
  deletedAt?: Maybe<DateTimeInput>
  email?: Maybe<String>
  firstName?: Maybe<String>
  lastName?: Maybe<String>
  price?: Maybe<Int>
  name?: Maybe<String>
  description?: Maybe<String>
  transport?: Maybe<String>
}

export interface OfferUpdateOneRequiredWithoutTransactionsInput {
  create?: Maybe<OfferCreateWithoutTransactionsInput>
  update?: Maybe<OfferUpdateWithoutTransactionsDataInput>
  upsert?: Maybe<OfferUpsertWithoutTransactionsInput>
  connect?: Maybe<OfferWhereUniqueInput>
}

export interface OfferCreateWithoutUserInput {
  id?: Maybe<ID_Input>
  active?: Maybe<Boolean>
  publicOffer?: Maybe<Boolean>
  amount: Int
  deletedAt?: Maybe<DateTimeInput>
  email: String
  firstName: String
  lastName: String
  transactions?: Maybe<TransactionCreateManyWithoutOfferInput>
  beneficator: OrganizationCreateOneWithoutOffersInput
  price: Int
  name: String
  description: String
  transport?: Maybe<String>
  gallery: GalleryCreateOneInput
}

export interface NodeNode {
  id: ID_Output
}

export interface UserPreviousValues {
  id: ID_Output
  email: String
  firstName?: String
  lastName?: String
  password?: String
  role: UserRole
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  email: () => Promise<String>
  firstName: () => Promise<String>
  lastName: () => Promise<String>
  password: () => Promise<String>
  role: () => Promise<UserRole>
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  email: () => Promise<AsyncIterator<String>>
  firstName: () => Promise<AsyncIterator<String>>
  lastName: () => Promise<AsyncIterator<String>>
  password: () => Promise<AsyncIterator<String>>
  role: () => Promise<AsyncIterator<UserRole>>
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>
  hasPreviousPage: () => Promise<Boolean>
  startCursor: () => Promise<String>
  endCursor: () => Promise<String>
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>
  startCursor: () => Promise<AsyncIterator<String>>
  endCursor: () => Promise<AsyncIterator<String>>
}

export interface FileConnection {
  pageInfo: PageInfo
  edges: FileEdge[]
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<FileEdge>>() => T
  aggregate: <T = AggregateFilePromise>() => T
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T
  aggregate: <T = AggregateFileSubscription>() => T
}

export interface FileEdge {
  node: File
  cursor: String
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T
  cursor: () => Promise<String>
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface File {
  id: ID_Output
  key: String
  fileName: String
  mimeType: String
  encoding: String
  url: String
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>
  key: () => Promise<String>
  fileName: () => Promise<String>
  mimeType: () => Promise<String>
  encoding: () => Promise<String>
  url: () => Promise<String>
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  key: () => Promise<AsyncIterator<String>>
  fileName: () => Promise<AsyncIterator<String>>
  mimeType: () => Promise<AsyncIterator<String>>
  encoding: () => Promise<AsyncIterator<String>>
  url: () => Promise<AsyncIterator<String>>
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>
  key: () => Promise<String>
  fileName: () => Promise<String>
  mimeType: () => Promise<String>
  encoding: () => Promise<String>
  url: () => Promise<String>
}

export interface TransactionPreviousValues {
  id: ID_Output
  amount: Int
  email: String
  firstName: String
  lastName: String
  comment?: String
  createdAt?: DateTimeOutput
  updatedAt?: DateTimeOutput
  deletedAt?: DateTimeOutput
  donatedAmount?: Int
  status: TransactionStatus
}

export interface TransactionPreviousValuesPromise
  extends Promise<TransactionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  amount: () => Promise<Int>
  email: () => Promise<String>
  firstName: () => Promise<String>
  lastName: () => Promise<String>
  comment: () => Promise<String>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  deletedAt: () => Promise<DateTimeOutput>
  donatedAmount: () => Promise<Int>
  status: () => Promise<TransactionStatus>
}

export interface TransactionPreviousValuesSubscription
  extends Promise<AsyncIterator<TransactionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  amount: () => Promise<AsyncIterator<Int>>
  email: () => Promise<AsyncIterator<String>>
  firstName: () => Promise<AsyncIterator<String>>
  lastName: () => Promise<AsyncIterator<String>>
  comment: () => Promise<AsyncIterator<String>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  donatedAmount: () => Promise<AsyncIterator<Int>>
  status: () => Promise<AsyncIterator<TransactionStatus>>
}

export interface TransactionSubscriptionPayload {
  mutation: MutationType
  node: Transaction
  updatedFields: String[]
  previousValues: TransactionPreviousValues
}

export interface TransactionSubscriptionPayloadPromise
  extends Promise<TransactionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = TransactionPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = TransactionPreviousValuesPromise>() => T
}

export interface TransactionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransactionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = TransactionSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = TransactionPreviousValuesSubscription>() => T
}

export interface BatchPayload {
  count: Long
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T
  cursor: () => Promise<String>
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface Offer {
  id: ID_Output
  active?: Boolean
  publicOffer?: Boolean
  amount: Int
  createdAt?: DateTimeOutput
  updatedAt?: DateTimeOutput
  deletedAt?: DateTimeOutput
  email: String
  firstName: String
  lastName: String
  price: Int
  name: String
  description: String
  transport?: String
}

export interface OfferPromise extends Promise<Offer>, Fragmentable {
  id: () => Promise<ID_Output>
  active: () => Promise<Boolean>
  publicOffer: () => Promise<Boolean>
  amount: () => Promise<Int>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  deletedAt: () => Promise<DateTimeOutput>
  email: () => Promise<String>
  firstName: () => Promise<String>
  lastName: () => Promise<String>
  transactions: <T = FragmentableArray<Transaction>>(args?: {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
  beneficator: <T = OrganizationPromise>() => T
  price: () => Promise<Int>
  name: () => Promise<String>
  user: <T = UserPromise>() => T
  description: () => Promise<String>
  transport: () => Promise<String>
  gallery: <T = GalleryPromise>() => T
}

export interface OfferSubscription
  extends Promise<AsyncIterator<Offer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  active: () => Promise<AsyncIterator<Boolean>>
  publicOffer: () => Promise<AsyncIterator<Boolean>>
  amount: () => Promise<AsyncIterator<Int>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  email: () => Promise<AsyncIterator<String>>
  firstName: () => Promise<AsyncIterator<String>>
  lastName: () => Promise<AsyncIterator<String>>
  transactions: <T = Promise<AsyncIterator<TransactionSubscription>>>(args?: {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
  beneficator: <T = OrganizationSubscription>() => T
  price: () => Promise<AsyncIterator<Int>>
  name: () => Promise<AsyncIterator<String>>
  user: <T = UserSubscription>() => T
  description: () => Promise<AsyncIterator<String>>
  transport: () => Promise<AsyncIterator<String>>
  gallery: <T = GallerySubscription>() => T
}

export interface OfferNullablePromise
  extends Promise<Offer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>
  active: () => Promise<Boolean>
  publicOffer: () => Promise<Boolean>
  amount: () => Promise<Int>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  deletedAt: () => Promise<DateTimeOutput>
  email: () => Promise<String>
  firstName: () => Promise<String>
  lastName: () => Promise<String>
  transactions: <T = FragmentableArray<Transaction>>(args?: {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
  beneficator: <T = OrganizationPromise>() => T
  price: () => Promise<Int>
  name: () => Promise<String>
  user: <T = UserPromise>() => T
  description: () => Promise<String>
  transport: () => Promise<String>
  gallery: <T = GalleryPromise>() => T
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node: User
  updatedFields: String[]
  previousValues: UserPreviousValues
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = UserPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = UserPreviousValuesPromise>() => T
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = UserSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = UserPreviousValuesSubscription>() => T
}

export interface Adress {
  id: ID_Output
  city?: String
  street?: String
  postalCode?: String
}

export interface AdressPromise extends Promise<Adress>, Fragmentable {
  id: () => Promise<ID_Output>
  city: () => Promise<String>
  street: () => Promise<String>
  postalCode: () => Promise<String>
}

export interface AdressSubscription
  extends Promise<AsyncIterator<Adress>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  city: () => Promise<AsyncIterator<String>>
  street: () => Promise<AsyncIterator<String>>
  postalCode: () => Promise<AsyncIterator<String>>
}

export interface AdressNullablePromise
  extends Promise<Adress | null>,
    Fragmentable {
  id: () => Promise<ID_Output>
  city: () => Promise<String>
  street: () => Promise<String>
  postalCode: () => Promise<String>
}

export interface TransactionEdge {
  node: Transaction
  cursor: String
}

export interface TransactionEdgePromise
  extends Promise<TransactionEdge>,
    Fragmentable {
  node: <T = TransactionPromise>() => T
  cursor: () => Promise<String>
}

export interface TransactionEdgeSubscription
  extends Promise<AsyncIterator<TransactionEdge>>,
    Fragmentable {
  node: <T = TransactionSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface AdressSubscriptionPayload {
  mutation: MutationType
  node: Adress
  updatedFields: String[]
  previousValues: AdressPreviousValues
}

export interface AdressSubscriptionPayloadPromise
  extends Promise<AdressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = AdressPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = AdressPreviousValuesPromise>() => T
}

export interface AdressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = AdressSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = AdressPreviousValuesSubscription>() => T
}

export interface AggregateOrganization {
  count: Int
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface AdressPreviousValues {
  id: ID_Output
  city?: String
  street?: String
  postalCode?: String
}

export interface AdressPreviousValuesPromise
  extends Promise<AdressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  city: () => Promise<String>
  street: () => Promise<String>
  postalCode: () => Promise<String>
}

export interface AdressPreviousValuesSubscription
  extends Promise<AsyncIterator<AdressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  city: () => Promise<AsyncIterator<String>>
  street: () => Promise<AsyncIterator<String>>
  postalCode: () => Promise<AsyncIterator<String>>
}

export interface OrganizationConnection {
  pageInfo: PageInfo
  edges: OrganizationEdge[]
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<OrganizationEdge>>() => T
  aggregate: <T = AggregateOrganizationPromise>() => T
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T
  aggregate: <T = AggregateOrganizationSubscription>() => T
}

export interface AggregateGallery {
  count: Int
}

export interface AggregateGalleryPromise
  extends Promise<AggregateGallery>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateGallerySubscription
  extends Promise<AsyncIterator<AggregateGallery>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface OfferEdge {
  node: Offer
  cursor: String
}

export interface OfferEdgePromise extends Promise<OfferEdge>, Fragmentable {
  node: <T = OfferPromise>() => T
  cursor: () => Promise<String>
}

export interface OfferEdgeSubscription
  extends Promise<AsyncIterator<OfferEdge>>,
    Fragmentable {
  node: <T = OfferSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface FileSubscriptionPayload {
  mutation: MutationType
  node: File
  updatedFields: String[]
  previousValues: FilePreviousValues
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = FilePromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = FilePreviousValuesPromise>() => T
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = FileSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = FilePreviousValuesSubscription>() => T
}

export interface User {
  id: ID_Output
  email: String
  firstName?: String
  lastName?: String
  password?: String
  role: UserRole
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>
  email: () => Promise<String>
  firstName: () => Promise<String>
  lastName: () => Promise<String>
  password: () => Promise<String>
  role: () => Promise<UserRole>
  offers: <T = FragmentableArray<Offer>>(args?: {
    where?: OfferWhereInput
    orderBy?: OfferOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
  adress: <T = AdressPromise>() => T
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  email: () => Promise<AsyncIterator<String>>
  firstName: () => Promise<AsyncIterator<String>>
  lastName: () => Promise<AsyncIterator<String>>
  password: () => Promise<AsyncIterator<String>>
  role: () => Promise<AsyncIterator<UserRole>>
  offers: <T = Promise<AsyncIterator<OfferSubscription>>>(args?: {
    where?: OfferWhereInput
    orderBy?: OfferOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
  adress: <T = AdressSubscription>() => T
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>
  email: () => Promise<String>
  firstName: () => Promise<String>
  lastName: () => Promise<String>
  password: () => Promise<String>
  role: () => Promise<UserRole>
  offers: <T = FragmentableArray<Offer>>(args?: {
    where?: OfferWhereInput
    orderBy?: OfferOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
  adress: <T = AdressPromise>() => T
}

export interface FilePreviousValues {
  id: ID_Output
  key: String
  fileName: String
  mimeType: String
  encoding: String
  url: String
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  key: () => Promise<String>
  fileName: () => Promise<String>
  mimeType: () => Promise<String>
  encoding: () => Promise<String>
  url: () => Promise<String>
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  key: () => Promise<AsyncIterator<String>>
  fileName: () => Promise<AsyncIterator<String>>
  mimeType: () => Promise<AsyncIterator<String>>
  encoding: () => Promise<AsyncIterator<String>>
  url: () => Promise<AsyncIterator<String>>
}

export interface Organization {
  id: ID_Output
  apiId?: Int
  apiSecret?: String
  organizationId?: Int
  active: Boolean
  createdAt?: DateTimeOutput
  updatedAt?: DateTimeOutput
  deletedAt?: DateTimeOutput
  name: String
  projectId?: Int
  description: String
  url: String
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>
  apiId: () => Promise<Int>
  apiSecret: () => Promise<String>
  organizationId: () => Promise<Int>
  active: () => Promise<Boolean>
  logo: <T = FilePromise>() => T
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  deletedAt: () => Promise<DateTimeOutput>
  name: () => Promise<String>
  offers: <T = FragmentableArray<Offer>>(args?: {
    where?: OfferWhereInput
    orderBy?: OfferOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
  projectId: () => Promise<Int>
  description: () => Promise<String>
  url: () => Promise<String>
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  apiId: () => Promise<AsyncIterator<Int>>
  apiSecret: () => Promise<AsyncIterator<String>>
  organizationId: () => Promise<AsyncIterator<Int>>
  active: () => Promise<AsyncIterator<Boolean>>
  logo: <T = FileSubscription>() => T
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  name: () => Promise<AsyncIterator<String>>
  offers: <T = Promise<AsyncIterator<OfferSubscription>>>(args?: {
    where?: OfferWhereInput
    orderBy?: OfferOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
  projectId: () => Promise<AsyncIterator<Int>>
  description: () => Promise<AsyncIterator<String>>
  url: () => Promise<AsyncIterator<String>>
}

export interface OrganizationNullablePromise
  extends Promise<Organization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>
  apiId: () => Promise<Int>
  apiSecret: () => Promise<String>
  organizationId: () => Promise<Int>
  active: () => Promise<Boolean>
  logo: <T = FilePromise>() => T
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  deletedAt: () => Promise<DateTimeOutput>
  name: () => Promise<String>
  offers: <T = FragmentableArray<Offer>>(args?: {
    where?: OfferWhereInput
    orderBy?: OfferOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
  projectId: () => Promise<Int>
  description: () => Promise<String>
  url: () => Promise<String>
}

export interface GalleryEdge {
  node: Gallery
  cursor: String
}

export interface GalleryEdgePromise extends Promise<GalleryEdge>, Fragmentable {
  node: <T = GalleryPromise>() => T
  cursor: () => Promise<String>
}

export interface GalleryEdgeSubscription
  extends Promise<AsyncIterator<GalleryEdge>>,
    Fragmentable {
  node: <T = GallerySubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface AdressConnection {
  pageInfo: PageInfo
  edges: AdressEdge[]
}

export interface AdressConnectionPromise
  extends Promise<AdressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<AdressEdge>>() => T
  aggregate: <T = AggregateAdressPromise>() => T
}

export interface AdressConnectionSubscription
  extends Promise<AsyncIterator<AdressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<AdressEdgeSubscription>>>() => T
  aggregate: <T = AggregateAdressSubscription>() => T
}

export interface GallerySubscriptionPayload {
  mutation: MutationType
  node: Gallery
  updatedFields: String[]
  previousValues: GalleryPreviousValues
}

export interface GallerySubscriptionPayloadPromise
  extends Promise<GallerySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = GalleryPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = GalleryPreviousValuesPromise>() => T
}

export interface GallerySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GallerySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = GallerySubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = GalleryPreviousValuesSubscription>() => T
}

export interface AggregateUser {
  count: Int
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface GalleryPreviousValues {
  id: ID_Output
}

export interface GalleryPreviousValuesPromise
  extends Promise<GalleryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
}

export interface GalleryPreviousValuesSubscription
  extends Promise<AsyncIterator<GalleryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
}

export interface AggregateTransaction {
  count: Int
}

export interface AggregateTransactionPromise
  extends Promise<AggregateTransaction>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateTransactionSubscription
  extends Promise<AsyncIterator<AggregateTransaction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface GalleryConnection {
  pageInfo: PageInfo
  edges: GalleryEdge[]
}

export interface GalleryConnectionPromise
  extends Promise<GalleryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<GalleryEdge>>() => T
  aggregate: <T = AggregateGalleryPromise>() => T
}

export interface GalleryConnectionSubscription
  extends Promise<AsyncIterator<GalleryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<GalleryEdgeSubscription>>>() => T
  aggregate: <T = AggregateGallerySubscription>() => T
}

export interface OrganizationEdge {
  node: Organization
  cursor: String
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T
  cursor: () => Promise<String>
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface OfferSubscriptionPayload {
  mutation: MutationType
  node: Offer
  updatedFields: String[]
  previousValues: OfferPreviousValues
}

export interface OfferSubscriptionPayloadPromise
  extends Promise<OfferSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = OfferPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = OfferPreviousValuesPromise>() => T
}

export interface OfferSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OfferSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = OfferSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = OfferPreviousValuesSubscription>() => T
}

export interface OfferConnection {
  pageInfo: PageInfo
  edges: OfferEdge[]
}

export interface OfferConnectionPromise
  extends Promise<OfferConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<OfferEdge>>() => T
  aggregate: <T = AggregateOfferPromise>() => T
}

export interface OfferConnectionSubscription
  extends Promise<AsyncIterator<OfferConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<OfferEdgeSubscription>>>() => T
  aggregate: <T = AggregateOfferSubscription>() => T
}

export interface OfferPreviousValues {
  id: ID_Output
  active?: Boolean
  publicOffer?: Boolean
  amount: Int
  createdAt?: DateTimeOutput
  updatedAt?: DateTimeOutput
  deletedAt?: DateTimeOutput
  email: String
  firstName: String
  lastName: String
  price: Int
  name: String
  description: String
  transport?: String
}

export interface OfferPreviousValuesPromise
  extends Promise<OfferPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  active: () => Promise<Boolean>
  publicOffer: () => Promise<Boolean>
  amount: () => Promise<Int>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  deletedAt: () => Promise<DateTimeOutput>
  email: () => Promise<String>
  firstName: () => Promise<String>
  lastName: () => Promise<String>
  price: () => Promise<Int>
  name: () => Promise<String>
  description: () => Promise<String>
  transport: () => Promise<String>
}

export interface OfferPreviousValuesSubscription
  extends Promise<AsyncIterator<OfferPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  active: () => Promise<AsyncIterator<Boolean>>
  publicOffer: () => Promise<AsyncIterator<Boolean>>
  amount: () => Promise<AsyncIterator<Int>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  email: () => Promise<AsyncIterator<String>>
  firstName: () => Promise<AsyncIterator<String>>
  lastName: () => Promise<AsyncIterator<String>>
  price: () => Promise<AsyncIterator<Int>>
  name: () => Promise<AsyncIterator<String>>
  description: () => Promise<AsyncIterator<String>>
  transport: () => Promise<AsyncIterator<String>>
}

export interface Transaction {
  id: ID_Output
  amount: Int
  email: String
  firstName: String
  lastName: String
  comment?: String
  createdAt?: DateTimeOutput
  updatedAt?: DateTimeOutput
  deletedAt?: DateTimeOutput
  donatedAmount?: Int
  status: TransactionStatus
}

export interface TransactionPromise extends Promise<Transaction>, Fragmentable {
  id: () => Promise<ID_Output>
  amount: () => Promise<Int>
  email: () => Promise<String>
  firstName: () => Promise<String>
  lastName: () => Promise<String>
  comment: () => Promise<String>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  deletedAt: () => Promise<DateTimeOutput>
  donatedAmount: () => Promise<Int>
  status: () => Promise<TransactionStatus>
  offer: <T = OfferPromise>() => T
}

export interface TransactionSubscription
  extends Promise<AsyncIterator<Transaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  amount: () => Promise<AsyncIterator<Int>>
  email: () => Promise<AsyncIterator<String>>
  firstName: () => Promise<AsyncIterator<String>>
  lastName: () => Promise<AsyncIterator<String>>
  comment: () => Promise<AsyncIterator<String>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  donatedAmount: () => Promise<AsyncIterator<Int>>
  status: () => Promise<AsyncIterator<TransactionStatus>>
  offer: <T = OfferSubscription>() => T
}

export interface TransactionNullablePromise
  extends Promise<Transaction | null>,
    Fragmentable {
  id: () => Promise<ID_Output>
  amount: () => Promise<Int>
  email: () => Promise<String>
  firstName: () => Promise<String>
  lastName: () => Promise<String>
  comment: () => Promise<String>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  deletedAt: () => Promise<DateTimeOutput>
  donatedAmount: () => Promise<Int>
  status: () => Promise<TransactionStatus>
  offer: <T = OfferPromise>() => T
}

export interface Gallery {
  id: ID_Output
}

export interface GalleryPromise extends Promise<Gallery>, Fragmentable {
  id: () => Promise<ID_Output>
  images: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput
    orderBy?: FileOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
}

export interface GallerySubscription
  extends Promise<AsyncIterator<Gallery>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  images: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput
    orderBy?: FileOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
}

export interface GalleryNullablePromise
  extends Promise<Gallery | null>,
    Fragmentable {
  id: () => Promise<ID_Output>
  images: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput
    orderBy?: FileOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
}

export interface OrganizationPreviousValues {
  id: ID_Output
  apiId?: Int
  apiSecret?: String
  organizationId?: Int
  active: Boolean
  createdAt?: DateTimeOutput
  updatedAt?: DateTimeOutput
  deletedAt?: DateTimeOutput
  name: String
  projectId?: Int
  description: String
  url: String
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  apiId: () => Promise<Int>
  apiSecret: () => Promise<String>
  organizationId: () => Promise<Int>
  active: () => Promise<Boolean>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  deletedAt: () => Promise<DateTimeOutput>
  name: () => Promise<String>
  projectId: () => Promise<Int>
  description: () => Promise<String>
  url: () => Promise<String>
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  apiId: () => Promise<AsyncIterator<Int>>
  apiSecret: () => Promise<AsyncIterator<String>>
  organizationId: () => Promise<AsyncIterator<Int>>
  active: () => Promise<AsyncIterator<Boolean>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  name: () => Promise<AsyncIterator<String>>
  projectId: () => Promise<AsyncIterator<Int>>
  description: () => Promise<AsyncIterator<String>>
  url: () => Promise<AsyncIterator<String>>
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType
  node: Organization
  updatedFields: String[]
  previousValues: OrganizationPreviousValues
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = OrganizationPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = OrganizationPreviousValuesPromise>() => T
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = OrganizationSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T
}

export interface AdressEdge {
  node: Adress
  cursor: String
}

export interface AdressEdgePromise extends Promise<AdressEdge>, Fragmentable {
  node: <T = AdressPromise>() => T
  cursor: () => Promise<String>
}

export interface AdressEdgeSubscription
  extends Promise<AsyncIterator<AdressEdge>>,
    Fragmentable {
  node: <T = AdressSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface AggregateAdress {
  count: Int
}

export interface AggregateAdressPromise
  extends Promise<AggregateAdress>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateAdressSubscription
  extends Promise<AsyncIterator<AggregateAdress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface AggregateFile {
  count: Int
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface AggregateOffer {
  count: Int
}

export interface AggregateOfferPromise
  extends Promise<AggregateOffer>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateOfferSubscription
  extends Promise<AsyncIterator<AggregateOffer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface TransactionConnection {
  pageInfo: PageInfo
  edges: TransactionEdge[]
}

export interface TransactionConnectionPromise
  extends Promise<TransactionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<TransactionEdge>>() => T
  aggregate: <T = AggregateTransactionPromise>() => T
}

export interface TransactionConnectionSubscription
  extends Promise<AsyncIterator<TransactionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<TransactionEdgeSubscription>>>() => T
  aggregate: <T = AggregateTransactionSubscription>() => T
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<UserEdge>>() => T
  aggregate: <T = AggregateUserPromise>() => T
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T
  aggregate: <T = AggregateUserSubscription>() => T
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

export type Long = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'User',
    embedded: false,
  },
  {
    name: 'Adress',
    embedded: false,
  },
  {
    name: 'File',
    embedded: false,
  },
  {
    name: 'UserRole',
    embedded: false,
  },
  {
    name: 'Gallery',
    embedded: false,
  },
  {
    name: 'Offer',
    embedded: false,
  },
  {
    name: 'Transaction',
    embedded: false,
  },
  {
    name: 'TransactionStatus',
    embedded: false,
  },
  {
    name: 'Organization',
    embedded: false,
  },
]

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env['PRISMA_ENDPOINT']}`,
  secret: `${process.env['PRISMA_SECRET']}`,
})
export const prisma = new Prisma()
