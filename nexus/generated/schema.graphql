### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Adress {
  city: String
  postalCode: String
  street: String
}

type AuthPayload {
  token: String!
  user: User!
}

type File {
  fileName: String!
  id: String!
  key: String!
}

type Gallery {
  id: String!
  images(after: String, before: String, first: Int, last: Int, skip: Int): [File!]!
}

type Mutation {
  """Deactivate or activate offer"""
  changeActiveStateOffer(active: Boolean!, confirmationHash: String!, offerId: ID!): Offer!

  """Create new offer"""
  createOffer(amount: Int!, description: String!, email: String!, firstName: String!, images: [ID!]!, lastName: String!, offerName: String!, organizationId: ID!, price: Int!, publicOffer: Boolean!, transport: String!): Offer!
  createOrganization(active: Boolean, apiId: Int!, apiSecret: String!, description: String!, logoId: ID!, name: String!, organizationId: Int!, url: String!): Organization!
  createTransaction(amount: Int!, comment: String, email: String!, firstName: String!, lastName: String!, offerId: ID!): Transaction!
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, firstName: String, lastName: String, password: String!): AuthPayload
  updateUser(city: String!, firstName: String!, id: ID, lastName: String!, postalCode: String!, street: String!): User!
  uploadFile(directory: String, file: Upload): File!
}

type Offer {
  active: Boolean
  amount: Int!
  beneficator: Organization
  description: String!
  gallery: Gallery!
  id: String!
  name: String!
  price: Int!
  remainingAmount: Int!
  transport: String
  user: User
}

type Organization {
  apiId: Int
  description: String!
  id: String!
  logo: File
  name: String!
  projectId: Int
  url: String!
}

type Query {
  getTransactionsStatistics: TransactionsStatistics!
  getTransactionStatus(id: ID!): Transaction!
  offer(id: ID!): Offer
  offers(active: Boolean, publicOffer: Boolean): [Offer!]!
  organizations: [Organization!]!
  recentTransactions: [Transaction!]!
  user: User!
}

type Transaction {
  amount: Int!
  donatedAmount: Int
  firstName: String!
  id: String!
  lastName: String!
  offer: Offer!
  status: TransactionStatus!
}

type TransactionsStatistics {
  donatedAmount: Int!
  donationsCount: Int!
  numberOfOrganizations: Int!
}

enum TransactionStatus {
  FAILED
  INSUFFICIENT
  PAID
  PENDING
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  adress: Adress
  email: String!
  firstName: String!
  fullName: String!
  lastName: String!
  shortName: String!
}
